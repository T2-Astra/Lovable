{"file_contents":{"client/src/components/PreviewPanel.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Monitor, Smartphone, Tablet, RotateCw, ExternalLink, AlertCircle, Terminal, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { WebContainerManager, TerminalOutput, WebContainerStatus } from \"@/lib/webcontainer\";\n\ninterface PreviewPanelProps {\n  previewUrl?: string;\n  isLoading?: boolean;\n  error?: string;\n  webContainer?: WebContainerManager;\n  useWebContainer?: boolean;\n}\n\ntype ViewportSize = 'desktop' | 'tablet' | 'mobile';\n\nexport function PreviewPanel({ previewUrl, isLoading, error, webContainer, useWebContainer }: PreviewPanelProps) {\n  const [viewport, setViewport] = useState<ViewportSize>('desktop');\n  const [key, setKey] = useState(0);\n  const [consoleOpen, setConsoleOpen] = useState(false);\n  const [terminalLogs, setTerminalLogs] = useState<TerminalOutput[]>([]);\n  const [containerStatus, setContainerStatus] = useState<WebContainerStatus | null>(null);\n  const scrollRef = useRef<HTMLDivElement>(null);\n  \n  const viewportSizes = {\n    desktop: { width: '100%', height: '100%', icon: Monitor, label: 'Desktop' },\n    tablet: { width: '768px', height: '100%', icon: Tablet, label: 'Tablet' },\n    mobile: { width: '375px', height: '100%', icon: Smartphone, label: 'Mobile' }\n  };\n  \n  // Subscribe to WebContainer terminal output and status\n  useEffect(() => {\n    if (!webContainer || !useWebContainer) {\n      return;\n    }\n\n    const unsubscribeTerminal = webContainer.onTerminalOutput((output) => {\n      setTerminalLogs(prev => [...prev, output]);\n    });\n\n    const unsubscribeStatus = webContainer.onStatusChange((status) => {\n      setContainerStatus(status);\n    });\n\n    return () => {\n      unsubscribeTerminal();\n      unsubscribeStatus();\n    };\n  }, [webContainer, useWebContainer]);\n\n  // Auto-scroll terminal to bottom when new logs arrive\n  useEffect(() => {\n    if (scrollRef.current && consoleOpen) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [terminalLogs, consoleOpen]);\n\n  // Auto-open console when there are errors\n  useEffect(() => {\n    if (containerStatus?.error) {\n      setConsoleOpen(true);\n    }\n  }, [containerStatus?.error]);\n  \n  const handleRefresh = () => {\n    setKey(prev => prev + 1);\n  };\n  \n  const handleOpenNew = () => {\n    const url = useWebContainer ? containerStatus?.serverUrl : previewUrl;\n    if (url) {\n      window.open(url, '_blank');\n    }\n  };\n\n  const handleClearLogs = () => {\n    setTerminalLogs([]);\n  };\n  \n  const currentViewport = viewportSizes[viewport];\n\n  // Determine the actual preview URL to use\n  const actualPreviewUrl = useWebContainer ? containerStatus?.serverUrl : previewUrl;\n  const actualIsLoading = useWebContainer \n    ? (containerStatus?.isBooting || containerStatus?.isInstalling || containerStatus?.isStarting || isLoading)\n    : isLoading;\n  const actualError = useWebContainer ? containerStatus?.error : error;\n  \n  // Get status message for WebContainer\n  const getStatusMessage = (): string => {\n    if (!containerStatus) return 'Initializing...';\n    if (containerStatus.isBooting) return 'Booting container...';\n    if (containerStatus.isInstalling) return 'Installing dependencies...';\n    if (containerStatus.isStarting) return 'Starting dev server...';\n    if (containerStatus.isReady) return 'Server running';\n    return 'Ready';\n  };\n  \n  return (\n    <div className=\"h-full flex flex-col bg-muted/30\">\n      {/* Preview Controls */}\n      <div className=\"flex items-center justify-between gap-4 p-3 border-b border-border bg-card\">\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\" className=\"gap-1.5\">\n            <div className={`w-1.5 h-1.5 rounded-full ${\n              actualIsLoading \n                ? 'bg-yellow-500 animate-pulse' \n                : actualPreviewUrl \n                  ? 'bg-green-500' \n                  : 'bg-muted-foreground'\n            }`} />\n            {actualIsLoading \n              ? (useWebContainer ? getStatusMessage() : 'Building...') \n              : actualPreviewUrl \n                ? 'Live' \n                : 'No Preview'}\n          </Badge>\n          {useWebContainer && (\n            <Badge variant=\"outline\" className=\"gap-1.5 text-xs\">\n              <Terminal className=\"w-3 h-3\" />\n              WebContainer\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-1\">\n          {/* Viewport Controls */}\n          {Object.entries(viewportSizes).map(([key, { icon: Icon, label }]) => (\n            <Button\n              key={key}\n              variant={viewport === key ? 'secondary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewport(key as ViewportSize)}\n              className=\"gap-1.5 h-8\"\n              data-testid={`button-viewport-${key}`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline text-xs\">{label}</span>\n            </Button>\n          ))}\n          \n          <div className=\"w-px h-6 bg-border mx-1\" />\n          \n          {/* Actions */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={!actualPreviewUrl || actualIsLoading}\n            className=\"h-8\"\n            data-testid=\"button-refresh\"\n          >\n            <RotateCw className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleOpenNew}\n            disabled={!actualPreviewUrl || actualIsLoading}\n            className=\"h-8\"\n            data-testid=\"button-open-new\"\n          >\n            <ExternalLink className=\"w-4 h-4\" />\n          </Button>\n\n          {useWebContainer && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setConsoleOpen(!consoleOpen)}\n              className=\"h-8 gap-1.5\"\n              data-testid=\"button-toggle-console\"\n            >\n              <Terminal className=\"w-4 h-4\" />\n              {consoleOpen ? <ChevronDown className=\"w-3 h-3\" /> : <ChevronUp className=\"w-3 h-3\" />}\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {/* Preview Content */}\n      <div className=\"flex-1 overflow-hidden flex flex-col\">\n        <div className={`${consoleOpen && useWebContainer ? 'flex-1' : 'h-full'} overflow-hidden flex items-center justify-center p-4`}>\n          {actualError ? (\n            <Card className=\"max-w-md p-6 space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-full bg-destructive/10 flex items-center justify-center\">\n                  <AlertCircle className=\"w-5 h-5 text-destructive\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-sm text-foreground\">Preview Error</h3>\n                  <p className=\"text-xs text-muted-foreground mt-0.5\">\n                    Failed to load preview\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-xs text-destructive bg-destructive/5 p-3 rounded-md font-mono\">\n                {actualError}\n              </div>\n            </Card>\n          ) : actualIsLoading ? (\n            <div className=\"text-center space-y-3\">\n              <div className=\"w-12 h-12 mx-auto border-4 border-primary/20 border-t-primary rounded-full animate-spin\" />\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium text-foreground\">\n                  {useWebContainer ? getStatusMessage() : 'Building Preview'}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {useWebContainer \n                    ? 'Setting up your development environment...' \n                    : 'Setting up your application...'}\n                </p>\n              </div>\n            </div>\n          ) : !actualPreviewUrl ? (\n            <div className=\"text-center space-y-3 max-w-md\">\n              <div className=\"w-16 h-16 mx-auto bg-muted rounded-full flex items-center justify-center\">\n                <Monitor className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"font-medium text-foreground\">No Preview Available</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Generate an application to see live preview\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div \n              className=\"bg-background border border-border rounded-md overflow-hidden shadow-lg transition-all duration-300\"\n              style={{\n                width: currentViewport.width,\n                height: currentViewport.height,\n                maxWidth: '100%',\n                maxHeight: '100%'\n              }}\n            >\n              <iframe\n                key={key}\n                src={actualPreviewUrl}\n                className=\"w-full h-full\"\n                title=\"Preview\"\n                sandbox=\"allow-scripts allow-same-origin allow-forms allow-modals allow-popups\"\n                data-testid=\"iframe-preview\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Console Output Panel */}\n        {useWebContainer && consoleOpen && (\n          <div className=\"h-64 border-t border-border bg-card flex flex-col\">\n            <div className=\"flex items-center justify-between px-4 py-2 border-b border-border\">\n              <div className=\"flex items-center gap-2\">\n                <Terminal className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium text-foreground\">Console</span>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {terminalLogs.length} lines\n                </Badge>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleClearLogs}\n                className=\"h-7 text-xs\"\n                data-testid=\"button-clear-logs\"\n              >\n                Clear\n              </Button>\n            </div>\n            <ScrollArea className=\"flex-1\">\n              <div ref={scrollRef} className=\"p-3 font-mono text-xs space-y-1\">\n                {terminalLogs.length === 0 ? (\n                  <p className=\"text-muted-foreground\">No output yet...</p>\n                ) : (\n                  terminalLogs.map((log, index) => (\n                    <div\n                      key={index}\n                      className={`${\n                        log.type === 'stderr' \n                          ? 'text-destructive' \n                          : 'text-foreground'\n                      }`}\n                      data-testid={`log-${index}`}\n                    >\n                      {log.data}\n                    </div>\n                  ))\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11392},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\n// Add session middleware for project storage\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'ai-website-builder-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { \n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2557},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport type { ProjectFile, Template } from \"@shared/schema\";\nimport { TEMPLATES } from \"@shared/schema\";\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nconst SYSTEM_PROMPT = `You are an expert full-stack web developer and code generator. Your task is to generate complete, production-ready web applications based on user prompts.\n\nWhen generating code:\n1. Create a well-structured project with proper file organization\n2. Use modern best practices and clean code principles\n3. Include all necessary files (HTML, CSS, JavaScript/TypeScript, config files)\n4. Add helpful comments but keep code concise\n5. Ensure responsive design and accessibility\n6. Use semantic HTML and proper CSS organization\n7. Generate working, functional code that runs without errors\n\nResponse format:\nGenerate a JSON object with this exact structure:\n{\n  \"projectName\": \"string (kebab-case)\",\n  \"description\": \"brief description\",\n  \"files\": [\n    {\n      \"path\": \"relative/path/to/file.ext\",\n      \"content\": \"full file content\",\n      \"language\": \"javascript|typescript|html|css|json|markdown\"\n    }\n  ],\n  \"dependencies\": {\n    \"package-name\": \"version\"\n  }\n}\n\nGenerate complete, working code. Do not use placeholders or TODO comments.`;\n\n// Template-specific instructions for Gemini\nconst TEMPLATE_INSTRUCTIONS: Record<string, string> = {\n  'react-vite': 'Create a React application using Vite as the build tool. Use TypeScript and modern React patterns with hooks. Include proper component structure, use functional components with hooks, and follow React best practices. Set up Vite configuration and include all necessary files.',\n  'nextjs': 'Create a Next.js application using the App Router (app directory). Use TypeScript and follow Next.js 14+ best practices. Include proper page structure, layouts, and server/client components as appropriate. Follow the App Router conventions and include all necessary Next.js configuration files.',\n  'vanilla': 'Create a simple web application using pure HTML, CSS, and vanilla JavaScript. No build tools, frameworks, or dependencies. Use modern ES6+ JavaScript features. Keep it simple and lightweight with clean, well-organized code.'\n};\n\nexport async function generateProject(prompt: string, template?: string): Promise<{\n  projectName: string;\n  description: string;\n  files: ProjectFile[];\n  dependencies: Record<string, string>;\n}> {\n  try {\n    const templateInstruction = template && TEMPLATE_INSTRUCTIONS[template] \n      ? `\\n\\nIMPORTANT - Framework Instructions:\\n${TEMPLATE_INSTRUCTIONS[template]}` \n      : '';\n    const fullPrompt = `${prompt}${templateInstruction}\\n\\nGenerate a complete web application based on this description. Include all necessary files.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: SYSTEM_PROMPT,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            projectName: { type: \"string\" },\n            description: { type: \"string\" },\n            files: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  path: { type: \"string\" },\n                  content: { type: \"string\" },\n                  language: { type: \"string\" }\n                },\n                required: [\"path\", \"content\", \"language\"]\n              }\n            }\n          },\n          required: [\"projectName\", \"description\", \"files\"]\n        },\n      },\n      contents: fullPrompt,\n    });\n\n    const rawJson = response.text;\n\n    if (!rawJson) {\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    const data = JSON.parse(rawJson);\n    \n    // Validate the response structure\n    if (!data.projectName || !data.files || !Array.isArray(data.files)) {\n      throw new Error(\"Invalid response structure from Gemini\");\n    }\n\n    // Extract dependencies from file content or use empty object\n    const dependencies: Record<string, string> = {};\n    const packageJsonFile = data.files.find((f: ProjectFile) => f.path === 'package.json');\n    if (packageJsonFile) {\n      try {\n        const packageJson = JSON.parse(packageJsonFile.content);\n        Object.assign(dependencies, packageJson.dependencies || {});\n      } catch (e) {\n        // Ignore JSON parse errors\n      }\n    }\n    \n    return {\n      projectName: data.projectName,\n      description: data.description || \"Generated web application\",\n      files: data.files,\n      dependencies\n    };\n  } catch (error) {\n    console.error(\"Gemini generation error:\", error);\n    throw new Error(`Failed to generate project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function* generateProjectStream(\n  prompt: string,\n  template?: string\n): AsyncGenerator<{type: string; data: any}> {\n  try {\n    yield { type: 'status', data: { message: 'Analyzing your prompt...' } };\n    \n    const templateInstruction = template && TEMPLATE_INSTRUCTIONS[template] \n      ? `\\n\\nIMPORTANT - Framework Instructions:\\n${TEMPLATE_INSTRUCTIONS[template]}` \n      : '';\n    const fullPrompt = `${prompt}${templateInstruction}\\n\\nGenerate a complete web application based on this description. Include all necessary files.`;\n\n    yield { type: 'status', data: { message: 'Planning project structure...' } };\n\n    const streamResponse = await ai.models.generateContentStream({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: SYSTEM_PROMPT,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            projectName: { type: \"string\" },\n            description: { type: \"string\" },\n            files: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  path: { type: \"string\" },\n                  content: { type: \"string\" },\n                  language: { type: \"string\" }\n                },\n                required: [\"path\", \"content\", \"language\"]\n              }\n            }\n          },\n          required: [\"projectName\", \"description\", \"files\"]\n        },\n      },\n      contents: fullPrompt,\n    });\n\n    yield { type: 'status', data: { message: 'Generating code...' } };\n    \n    let accumulatedText = '';\n    let chunkCount = 0;\n    \n    for await (const chunk of streamResponse) {\n      if (!chunk || !chunk.text) {\n        continue;\n      }\n      \n      const chunkText = chunk.text;\n      if (chunkText) {\n        accumulatedText += chunkText;\n        chunkCount++;\n        \n        // Update progress based on chunks received (estimate)\n        const progress = Math.min(90, 30 + (chunkCount * 2));\n        yield { \n          type: 'status', \n          data: { \n            message: 'Generating code...',\n          } \n        };\n      }\n    }\n\n    const finalJson = accumulatedText;\n    if (!finalJson) {\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    const data = JSON.parse(finalJson);\n    \n    if (!data.projectName || !data.files || !Array.isArray(data.files)) {\n      throw new Error(\"Invalid response structure from Gemini\");\n    }\n\n    const dependencies: Record<string, string> = {};\n    const packageJsonFile = data.files.find((f: ProjectFile) => f.path === 'package.json');\n    if (packageJsonFile) {\n      try {\n        const packageJson = JSON.parse(packageJsonFile.content);\n        Object.assign(dependencies, packageJson.dependencies || {});\n      } catch (e) {\n        // Ignore JSON parse errors\n      }\n    }\n\n    const result = {\n      projectName: data.projectName,\n      description: data.description || \"Generated web application\",\n      files: data.files,\n      dependencies\n    };\n\n    yield { type: 'status', data: { message: 'Finalizing project...' } };\n    yield { type: 'complete', data: { project: result } };\n    \n  } catch (error) {\n    console.error(\"Gemini streaming error:\", error);\n    yield { \n      type: 'error', \n      data: { \n        error: error instanceof Error ? error.message : 'Unknown error during generation' \n      } \n    };\n  }\n}\n\nexport async function streamGeneration(\n  prompt: string,\n  template?: string,\n  onProgress?: (step: string, currentFile?: string, progress?: number) => void\n): Promise<{\n  projectName: string;\n  description: string;\n  files: ProjectFile[];\n  dependencies: Record<string, string>;\n}> {\n  // Simulate streaming by breaking generation into steps\n  onProgress?.('analyzing', undefined, 10);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  onProgress?.('planning', undefined, 25);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  onProgress?.('generating', 'project structure', 40);\n  const result = await generateProject(prompt, template);\n  \n  // Simulate file-by-file generation feedback\n  const fileCount = result.files.length;\n  for (let i = 0; i < fileCount; i++) {\n    const progress = 40 + Math.floor((i / fileCount) * 40);\n    onProgress?.('generating', result.files[i].path, progress);\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n  \n  onProgress?.('dependencies', undefined, 85);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  onProgress?.('complete', undefined, 100);\n  \n  return result;\n}\n\n// Get available templates\nexport function getTemplates(): Template[] {\n  return TEMPLATES;\n}\n","size_bytes":9794},"client/src/components/CodeEditor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MonacoEditor } from \"./MonacoEditor\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileCode, Eye, Edit, Save, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProjectFile } from \"@shared/schema\";\n\ninterface CodeEditorProps {\n  file?: ProjectFile;\n  onSave?: (file: ProjectFile, newContent: string) => void;\n  modifiedFiles?: Set<string>;\n}\n\nexport function CodeEditor({ file, onSave, modifiedFiles }: CodeEditorProps) {\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [isSaved, setIsSaved] = useState(false);\n  const { toast } = useToast();\n  \n  useEffect(() => {\n    if (file) {\n      setEditedContent(file.content);\n      setIsEditMode(false);\n      setIsSaved(false);\n    }\n  }, [file?.path]);\n  \n  useEffect(() => {\n    if (!isEditMode) {\n      return;\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 's') {\n        e.preventDefault();\n        handleSave();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isEditMode, editedContent, file]);\n  \n  const handleSave = () => {\n    if (!file || !onSave) return;\n    \n    onSave(file, editedContent);\n    setIsSaved(true);\n    \n    toast({\n      title: \"File saved\",\n      description: `${file.path} has been saved successfully`,\n      duration: 2000,\n    });\n    \n    setTimeout(() => {\n      setIsSaved(false);\n    }, 2000);\n  };\n  \n  const handleToggleMode = () => {\n    if (isEditMode && editedContent !== file?.content) {\n      const shouldDiscard = window.confirm(\n        \"You have unsaved changes. Discard them?\"\n      );\n      if (!shouldDiscard) return;\n      \n      if (file) {\n        setEditedContent(file.content);\n      }\n    }\n    setIsEditMode(!isEditMode);\n    setIsSaved(false);\n  };\n  \n  const handleContentChange = (value: string) => {\n    setEditedContent(value);\n    setIsSaved(false);\n  };\n  \n  if (!file) {\n    return (\n      <div className=\"h-full flex items-center justify-center p-8\">\n        <div className=\"text-center space-y-3 max-w-md\">\n          <div className=\"w-16 h-16 mx-auto bg-muted rounded-full flex items-center justify-center\">\n            <FileCode className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-1\">\n            <h3 className=\"font-medium text-foreground\">No File Selected</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Select a file from the explorer to view its contents\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  const getLanguageLabel = (lang: string) => {\n    const labels: Record<string, string> = {\n      'typescript': 'TypeScript',\n      'javascript': 'JavaScript',\n      'html': 'HTML',\n      'css': 'CSS',\n      'json': 'JSON',\n      'markdown': 'Markdown'\n    };\n    return labels[lang] || lang.toUpperCase();\n  };\n  \n  const hasUnsavedChanges = isEditMode && editedContent !== file.content;\n  const isModified = modifiedFiles?.has(file.path) || false;\n  \n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* File Header */}\n      <div className=\"flex items-center justify-between gap-4 p-3 border-b border-border bg-card\">\n        <div className=\"flex items-center gap-3 min-w-0\">\n          <FileCode className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n          <span className=\"text-sm font-medium truncate\" data-testid=\"text-filename\">\n            {file.path}\n          </span>\n          {isModified && (\n            <div className=\"w-2 h-2 rounded-full bg-primary flex-shrink-0\" title=\"Modified\" />\n          )}\n          {hasUnsavedChanges && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Unsaved\n            </Badge>\n          )}\n          {isSaved && (\n            <Badge variant=\"secondary\" className=\"text-xs gap-1\">\n              <Check className=\"w-3 h-3\" />\n              Saved\n            </Badge>\n          )}\n        </div>\n        <div className=\"flex items-center gap-2 flex-shrink-0\">\n          {isEditMode && (\n            <Button\n              variant=\"default\"\n              size=\"sm\"\n              onClick={handleSave}\n              disabled={!hasUnsavedChanges}\n              className=\"gap-1.5\"\n              data-testid=\"button-save\"\n            >\n              <Save className=\"w-3.5 h-3.5\" />\n              Save\n            </Button>\n          )}\n          <Button\n            variant={isEditMode ? \"secondary\" : \"outline\"}\n            size=\"sm\"\n            onClick={handleToggleMode}\n            className=\"gap-1.5\"\n            data-testid=\"button-toggle-mode\"\n          >\n            {isEditMode ? (\n              <>\n                <Eye className=\"w-3.5 h-3.5\" />\n                View\n              </>\n            ) : (\n              <>\n                <Edit className=\"w-3.5 h-3.5\" />\n                Edit\n              </>\n            )}\n          </Button>\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            {getLanguageLabel(file.language)}\n          </Badge>\n        </div>\n      </div>\n      \n      {/* Monaco Editor */}\n      <div className=\"flex-1 overflow-hidden bg-background\">\n        <MonacoEditor\n          file={{ ...file, content: isEditMode ? editedContent : file.content }}\n          onChange={handleContentChange}\n          readOnly={!isEditMode}\n        />\n      </div>\n      \n      {/* Status Bar */}\n      <div className=\"flex items-center justify-between px-3 py-1.5 border-t border-border bg-card text-xs text-muted-foreground\">\n        <div className=\"flex items-center gap-3\">\n          <span>{getLanguageLabel(file.language)}</span>\n          <span>UTF-8</span>\n          {isEditMode && <span className=\"text-primary\">Edit Mode</span>}\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <span>{(isEditMode ? editedContent : file.content).split('\\n').length} lines</span>\n          <span>{(isEditMode ? editedContent : file.content).length} chars</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6249},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"design_guidelines.md":{"content":"# Design Guidelines: AI-Powered Full-Stack Website Builder\n\n## Design Approach\n\n**Selected Approach**: Design System + Reference-Based Hybrid\n- **Primary Reference**: Bolt.new's developer-centric interface patterns\n- **Design System Foundation**: VS Code's component patterns for familiarity with developers\n- **Justification**: Developer productivity tools require predictable, efficient interfaces with minimal cognitive load. Drawing from established code editor patterns ensures immediate usability.\n\n## Core Layout Architecture\n\n### Primary Application Structure\n**Three-Panel Split Layout**:\n- **Left Sidebar** (w-64): Project files, configuration, templates selector\n- **Center Panel** (flex-1): Dual-mode interface - Prompt Input (when idle) + Code Editor (during/after generation)\n- **Right Panel** (flex-1): Live preview with responsive viewport controls\n\n**Responsive Breakpoint Strategy**:\n- Desktop (lg:): Full three-panel layout\n- Tablet (md:): Collapsible sidebar, tabbed center/right panels\n- Mobile: Stacked single-column with bottom navigation tabs\n\n### Vertical Rhythm & Spacing\nPrimary spacing units: **2, 3, 4, 6, 8**\n- Component padding: p-4, p-6\n- Section gaps: space-y-4, gap-6\n- Panel margins: m-0 (panels should be edge-to-edge for maximized workspace)\n- Header/footer: py-3, px-6\n\n## Typography System\n\n**Font Families**:\n- **UI Text**: Inter (via Google Fonts) - Clean, modern sans-serif for interface elements\n- **Code**: JetBrains Mono (via Google Fonts) - Optimized for code readability\n- **Headings**: Inter SemiBold/Bold\n\n**Hierarchy**:\n- **Primary Headlines**: text-2xl font-semibold (Project name, main headers)\n- **Section Headers**: text-lg font-medium (Panel titles, file headers)\n- **Body Text**: text-sm (General UI text, labels)\n- **Small Text**: text-xs (Metadata, timestamps, secondary info)\n- **Code**: text-sm font-mono (Editor content, terminal output)\n\n## Component Library\n\n### Navigation & Controls\n\n**Top Application Bar** (h-14):\n- Logo/branding (left)\n- Project name/breadcrumb (center-left)\n- Action buttons: Save, Share, Deploy (right)\n- User profile menu (far right)\n- Spacing: px-6, items-center justified\n\n**Sidebar Navigation**:\n- Collapsible file tree with indent levels (pl-4 per level)\n- File icons using Heroicons (DocumentTextIcon, FolderIcon, etc.)\n- Add file/folder actions on hover\n- Templates gallery section at bottom\n\n**Preview Panel Controls** (h-12):\n- Responsive viewport toggles (Mobile/Tablet/Desktop icons)\n- Refresh preview button\n- Open in new tab action\n- Device frame selector dropdown\n\n### Primary Interface Components\n\n**Prompt Input Section** (Initial State):\n- Large textarea (min-h-32) with placeholder: \"Describe the website you want to build...\"\n- Character count indicator (bottom-right)\n- Submit button (primary action, h-12 w-full)\n- Example prompts gallery below (grid-cols-2 gap-4, each p-4 with border)\n- Templates quick-start cards (grid-cols-3 gap-4)\n\n**Code Editor Panel**:\n- File tabs bar (h-10) with close buttons\n- Monaco/CodeMirror integration area (h-full)\n- Line numbers (w-12)\n- Minimap (w-20, right edge)\n- Status bar (h-6 bottom): Language indicator, line/column, file size\n\n**Live Preview Frame**:\n- Iframe container with device frame borders\n- Loading state with skeleton UI\n- Error boundary display for runtime errors\n- Console output toggle (bottom drawer, h-48 when open)\n\n### Generation Feedback UI\n\n**Active Generation Overlay**:\n- Semi-transparent backdrop\n- Centered progress card (max-w-md):\n  - AI thinking animation (Lottie or CSS)\n  - Generation steps list with checkmarks\n  - Current file being created (text-sm text-muted)\n  - Cancel generation button (secondary)\n\n**File Change Indicators**:\n- Toast notifications (top-right, max-w-sm) for each file created/modified\n- Slide-in animation, auto-dismiss after 3s\n- Stack multiple toasts with gap-2\n\n### Data Display Components\n\n**File Tree Items** (h-8):\n- Icon + filename layout (gap-2)\n- Truncate long names with tooltip\n- Modified indicator (small dot)\n- Right-click context menu support\n\n**Dependencies List** (Sidebar Bottom Panel):\n- Package name + version (text-sm)\n- Install status badge\n- Update available indicator\n- Add dependency input field (h-10)\n\n**Console/Terminal Output**:\n- Tabbed interface (Logs, Errors, Network)\n- Monospace text with syntax highlighting for errors\n- Clear output button (top-right)\n- Auto-scroll toggle\n- Timestamp column (text-xs, w-20)\n\n## Interaction Patterns\n\n**Split Panel Resizing**:\n- Draggable dividers (w-1, hover:w-2) between panels\n- Cursor: col-resize on hover\n- Minimum panel widths: 280px (sidebar), 400px (center/right)\n- Double-click divider to reset to defaults\n\n**Keyboard Shortcuts Bar**:\n- Collapsible bottom banner (h-8) showing common shortcuts\n- Toggle with Cmd+K\n- Shortcuts: Cmd+S (save), Cmd+Enter (generate), Cmd+P (preview toggle)\n\n**Modal Dialogs**:\n- Template selector: Full-screen overlay with gallery (grid-cols-4)\n- Settings: Centered modal (max-w-2xl) with tabbed interface\n- Share dialog: Centered (max-w-md) with link copy and embed code\n\n## Accessibility Standards\n\n- Focus indicators: 2px outline with 2px offset\n- All interactive elements minimum 44x44px touch targets\n- ARIA labels on icon-only buttons\n- Keyboard navigation through all panels (Tab, Shift+Tab)\n- Screen reader announcements for generation steps\n\n## Images\n\n**Hero Section**: Not applicable - this is a productivity tool, launches directly to workspace\n\n**Empty State Illustrations**:\n- **Empty Project State**: Illustration showing code + preview panels with sparkles (center of workspace, max-w-md)\n- **Template Cards**: Preview thumbnails for each template (aspect-ratio-video, rounded-lg borders)\n- **Loading States**: Subtle animated gradient placeholders matching panel dimensions\n\n**Location & Usage**:\n- Template thumbnails in sidebar and template selector modal\n- Empty state illustration only when no project is active\n- All illustrations should be inline SVGs for performance\n\n## Animation Guidelines\n\nUse animations sparingly and purposefully:\n- **File creation**: Subtle slide-in from left (200ms)\n- **Panel transitions**: Smooth resize with transform (150ms cubic-bezier)\n- **Generation progress**: Pulsing glow on active step (1s infinite)\n- **Preview loading**: Skeleton fade-in (300ms)\n\nAvoid: Excessive transitions on typing, hover states, or frequent UI updates\n\n## Special Considerations\n\n**Performance Priority**:\n- Virtualized file tree for large projects (render only visible items)\n- Debounced preview updates (500ms after code changes)\n- Lazy load preview iframe content\n\n**Developer Experience**:\n- Maintain consistent spacing across panels for visual harmony\n- Use monospace fonts consistently for all code-related content\n- Clear visual hierarchy between active/inactive panels\n- Status indicators for API calls, builds, deployments\n\nThis design prioritizes workspace efficiency, clear information hierarchy, and familiar patterns from established developer tools while maintaining a modern, polished aesthetic.","size_bytes":7052},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { Workspace } from \"@/components/Workspace\";\nimport { useStreamingGenerate } from \"@/hooks/useStreamingGenerate\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { GenerationResponse, Template } from \"@shared/schema\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const streaming = useStreamingGenerate();\n  const [selectedTemplate, setSelectedTemplate] = useState<Template['id'] | undefined>(undefined);\n  \n  const handleGenerate = async (prompt: string, template?: string): Promise<GenerationResponse> => {\n    try {\n      const result = await streaming.generate(prompt, template);\n      toast({\n        title: \"Generation Complete!\",\n        description: `Successfully generated ${result.files.length} files`,\n      });\n      return result;\n    } catch (error) {\n      toast({\n        title: \"Generation Failed\",\n        description: error instanceof Error ? error.message : 'Unknown error',\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n  \n  return (\n    <Workspace \n      onGenerate={handleGenerate} \n      generatedProject={streaming.project}\n      isGenerating={streaming.isStreaming}\n      streamingStatus={streaming.status}\n      streamingFileName={streaming.fileName}\n      streamingProgress={streaming.progress}\n      selectedTemplate={selectedTemplate}\n      onTemplateChange={setSelectedTemplate}\n    />\n  );\n}\n","size_bytes":1423},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/PromptInput.tsx":{"content":"import { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Sparkles, Zap, Layers, X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TemplateSelector } from \"./TemplateSelector\";\nimport { TEMPLATES, type Template } from \"@shared/schema\";\n\ninterface PromptInputProps {\n  onGenerate: (prompt: string, template?: string) => void;\n  isGenerating?: boolean;\n  selectedTemplate?: Template['id'];\n  onTemplateChange?: (templateId?: Template['id']) => void;\n}\n\nconst EXAMPLE_PROMPTS = [\n  {\n    title: \"Todo App\",\n    prompt: \"Create a todo list app with add, delete, and mark complete functionality. Use a clean, modern design with smooth animations.\",\n    icon: \"✓\"\n  },\n  {\n    title: \"Portfolio Site\",\n    prompt: \"Build a personal portfolio website with hero section, projects gallery, about me section, and contact form. Make it responsive and visually stunning.\",\n    icon: \"🎨\"\n  },\n  {\n    title: \"Weather Dashboard\",\n    prompt: \"Create a weather dashboard that displays current weather and 5-day forecast. Include temperature, conditions, and weather icons. Use a card-based layout.\",\n    icon: \"🌤️\"\n  },\n  {\n    title: \"E-commerce Product Page\",\n    prompt: \"Build a product detail page for an e-commerce site with image gallery, product info, add to cart button, and reviews section.\",\n    icon: \"🛍️\"\n  }\n];\n\nexport function PromptInput({ onGenerate, isGenerating, selectedTemplate, onTemplateChange }: PromptInputProps) {\n  const [prompt, setPrompt] = useState(\"\");\n  const [showTemplateSelector, setShowTemplateSelector] = useState(false);\n  const maxChars = 2000;\n\n  const handleSubmit = () => {\n    if (prompt.trim() && prompt.length >= 10) {\n      onGenerate(prompt, selectedTemplate);\n    }\n  };\n\n  const handleExampleClick = (examplePrompt: string) => {\n    setPrompt(examplePrompt);\n  };\n\n  const handleTemplateSelect = (templateId: Template['id']) => {\n    onTemplateChange?.(templateId);\n  };\n\n  const handleRemoveTemplate = () => {\n    onTemplateChange?.(undefined);\n  };\n\n  const currentTemplate = TEMPLATES.find(t => t.id === selectedTemplate);\n  const isValid = prompt.trim().length >= 10 && prompt.length <= maxChars;\n\n  return (\n    <div className=\"flex items-center justify-center h-full w-full p-8 overflow-y-auto\">\n      <div className=\"w-full max-w-3xl space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"inline-flex items-center gap-2 bg-primary/10 text-primary px-3 py-1 rounded-full text-xs font-medium\">\n            <Sparkles className=\"w-3 h-3\" />\n            AI-Powered Code Generation\n          </div>\n          <h1 className=\"text-2xl font-semibold text-foreground\">\n            What would you like to build?\n          </h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Describe your web application and let AI bring it to life\n          </p>\n        </div>\n\n        {/* Template Selection */}\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between gap-3\">\n            <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n              <Layers className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n              <span className=\"text-sm text-muted-foreground\">Framework:</span>\n              {currentTemplate ? (\n                <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                  <Badge variant=\"secondary\" className=\"gap-1.5\" data-testid=\"badge-selected-template\">\n                    {currentTemplate.name}\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={handleRemoveTemplate}\n                    className=\"flex-shrink-0\"\n                    data-testid=\"button-remove-template\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ) : (\n                <span className=\"text-sm text-muted-foreground\">Auto-detect from prompt</span>\n              )}\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowTemplateSelector(true)}\n              disabled={isGenerating}\n              data-testid=\"button-select-template\"\n            >\n              {currentTemplate ? 'Change' : 'Select'}\n            </Button>\n          </div>\n        </Card>\n\n        {/* Prompt Input */}\n        <Card className=\"p-6 space-y-4\">\n          <div className=\"space-y-2\">\n            <Textarea\n              placeholder=\"Describe the website you want to build... Be specific about features, design style, and functionality.\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              className=\"min-h-32 resize-none text-sm\"\n              disabled={isGenerating}\n              data-testid=\"textarea-prompt\"\n            />\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className={`${prompt.length < 10 ? 'text-muted-foreground' : prompt.length > maxChars ? 'text-destructive' : 'text-muted-foreground'}`}>\n                {prompt.length < 10 ? `Minimum 10 characters (${10 - prompt.length} more needed)` : `${prompt.length}/${maxChars}`}\n              </span>\n              {prompt.length > 0 && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => setPrompt(\"\")}\n                  className=\"h-6 px-2\"\n                  data-testid=\"button-clear\"\n                >\n                  Clear\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <Button\n            onClick={handleSubmit}\n            disabled={!isValid || isGenerating}\n            className=\"w-full gap-2\"\n            size=\"lg\"\n            data-testid=\"button-generate\"\n          >\n            {isGenerating ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <Zap className=\"w-4 h-4\" />\n                Generate Application\n              </>\n            )}\n          </Button>\n        </Card>\n\n        {/* Template Selector Dialog */}\n        <TemplateSelector\n          open={showTemplateSelector}\n          onOpenChange={setShowTemplateSelector}\n          selectedTemplate={selectedTemplate}\n          onSelectTemplate={handleTemplateSelect}\n        />\n\n        {/* Example Prompts */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-px flex-1 bg-border\" />\n            <span className=\"text-xs text-muted-foreground\">Try these examples</span>\n            <div className=\"h-px flex-1 bg-border\" />\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            {EXAMPLE_PROMPTS.map((example, idx) => (\n              <Card\n                key={idx}\n                className=\"p-4 cursor-pointer hover-elevate active-elevate-2 transition-all\"\n                onClick={() => handleExampleClick(example.prompt)}\n                data-testid={`card-example-${idx}`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"text-2xl\">{example.icon}</div>\n                  <div className=\"flex-1 min-w-0 space-y-1\">\n                    <div className=\"font-medium text-sm text-foreground\">\n                      {example.title}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                      {example.prompt}\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Features */}\n        <div className=\"flex flex-wrap items-center justify-center gap-2\">\n          <Badge variant=\"secondary\" className=\"gap-1\">\n            <span className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n            React + Vite\n          </Badge>\n          <Badge variant=\"secondary\" className=\"gap-1\">\n            <span className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n            Next.js\n          </Badge>\n          <Badge variant=\"secondary\" className=\"gap-1\">\n            <span className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n            Vanilla JavaScript\n          </Badge>\n          <Badge variant=\"secondary\" className=\"gap-1\">\n            <span className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n            Live Preview\n          </Badge>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8812},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/useStreamingGenerate.ts":{"content":"import { useState, useCallback, useRef, useEffect } from 'react';\nimport type { GenerationResponse, StreamEvent } from '@shared/schema';\n\ninterface StreamingState {\n  status: string;\n  fileName?: string;\n  progress: number;\n  isStreaming: boolean;\n  error: string | null;\n  project: GenerationResponse | null;\n}\n\nexport function useStreamingGenerate() {\n  const [state, setState] = useState<StreamingState>({\n    status: '',\n    fileName: undefined,\n    progress: 0,\n    isStreaming: false,\n    error: null,\n    project: null,\n  });\n  \n  const eventSourceRef = useRef<EventSource | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  const cleanup = useCallback(() => {\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, []);\n  \n  const generate = useCallback(async (prompt: string, template?: string): Promise<GenerationResponse> => {\n    return new Promise((resolve, reject) => {\n      cleanup();\n      \n      let isCompleted = false;\n      \n      setState({\n        status: 'Initializing...',\n        fileName: undefined,\n        progress: 0,\n        isStreaming: true,\n        error: null,\n        project: null,\n      });\n      \n      const params = new URLSearchParams({ prompt });\n      if (template) {\n        params.append('template', template);\n      }\n      \n      const eventSource = new EventSource(`/api/generate/stream?${params.toString()}`);\n      eventSourceRef.current = eventSource;\n      \n      eventSource.addEventListener('status', (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          setState(prev => ({\n            ...prev,\n            status: data.message,\n            progress: Math.min(prev.progress + 10, 90),\n          }));\n        } catch (error) {\n          console.error('Failed to parse status event:', error);\n        }\n      });\n      \n      eventSource.addEventListener('file', (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          setState(prev => ({\n            ...prev,\n            fileName: data.fileName,\n            progress: data.progress,\n          }));\n        } catch (error) {\n          console.error('Failed to parse file event:', error);\n        }\n      });\n      \n      eventSource.addEventListener('complete', (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          isCompleted = true;\n          setState(prev => ({\n            ...prev,\n            status: 'Complete',\n            progress: 100,\n            isStreaming: false,\n            project: data.project,\n          }));\n          cleanup();\n          resolve(data.project);\n        } catch (error) {\n          console.error('Failed to parse complete event:', error);\n          const err = error instanceof Error ? error : new Error('Failed to parse completion data');\n          setState(prev => ({\n            ...prev,\n            isStreaming: false,\n            error: err.message,\n          }));\n          cleanup();\n          reject(err);\n        }\n      });\n      \n      eventSource.addEventListener('error', (event: MessageEvent) => {\n        if (isCompleted) return;\n        \n        try {\n          const data = JSON.parse(event.data);\n          const errorMessage = data.error || 'Unknown error occurred';\n          setState(prev => ({\n            ...prev,\n            isStreaming: false,\n            error: errorMessage,\n          }));\n          cleanup();\n          reject(new Error(errorMessage));\n        } catch (error) {\n          const errorMessage = 'Stream connection error';\n          setState(prev => ({\n            ...prev,\n            isStreaming: false,\n            error: errorMessage,\n          }));\n          cleanup();\n          reject(new Error(errorMessage));\n        }\n      });\n      \n      eventSource.onerror = () => {\n        if (isCompleted) return;\n        \n        const errorMessage = 'Connection to server lost';\n        setState(prev => ({\n          ...prev,\n          isStreaming: false,\n          error: errorMessage,\n        }));\n        cleanup();\n        reject(new Error(errorMessage));\n      };\n    });\n  }, [cleanup]);\n  \n  const cancel = useCallback(() => {\n    cleanup();\n    setState(prev => ({\n      ...prev,\n      isStreaming: false,\n      status: 'Cancelled',\n    }));\n  }, [cleanup]);\n  \n  useEffect(() => {\n    return () => {\n      cleanup();\n    };\n  }, [cleanup]);\n  \n  return {\n    generate,\n    cancel,\n    status: state.status,\n    fileName: state.fileName,\n    progress: state.progress,\n    isStreaming: state.isStreaming,\n    error: state.error,\n    project: state.project,\n  };\n}\n","size_bytes":4812},"client/src/components/MonacoEditor.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport Editor from \"@monaco-editor/react\";\nimport type { ProjectFile } from \"@shared/schema\";\nimport { useTheme } from \"next-themes\";\n\ninterface MonacoEditorProps {\n  file: ProjectFile;\n  onChange?: (value: string) => void;\n  readOnly?: boolean;\n}\n\nexport function MonacoEditor({ file, onChange, readOnly = false }: MonacoEditorProps) {\n  const { theme } = useTheme();\n  const editorRef = useRef<any>(null);\n\n  const getLanguage = (fileLanguage: string, path: string): string => {\n    // Map file language to Monaco language identifiers\n    const languageMap: Record<string, string> = {\n      'typescript': 'typescript',\n      'javascript': 'javascript',\n      'html': 'html',\n      'css': 'css',\n      'json': 'json',\n      'markdown': 'markdown',\n    };\n\n    // Check file extension for more precise language detection\n    if (path.endsWith('.tsx')) return 'typescript';\n    if (path.endsWith('.jsx')) return 'javascript';\n    if (path.endsWith('.ts')) return 'typescript';\n    if (path.endsWith('.js')) return 'javascript';\n    if (path.endsWith('.html')) return 'html';\n    if (path.endsWith('.css')) return 'css';\n    if (path.endsWith('.json')) return 'json';\n    if (path.endsWith('.md')) return 'markdown';\n\n    return languageMap[fileLanguage] || 'plaintext';\n  };\n\n  const handleEditorDidMount = (editor: any) => {\n    editorRef.current = editor;\n  };\n\n  const handleChange = (value: string | undefined) => {\n    if (onChange && value !== undefined) {\n      onChange(value);\n    }\n  };\n\n  // Determine if we should show minimap based on screen size\n  const shouldShowMinimap = () => {\n    return window.innerWidth >= 1280; // Show minimap on xl screens and above\n  };\n\n  return (\n    <Editor\n      height=\"100%\"\n      language={getLanguage(file.language, file.path)}\n      value={file.content}\n      onChange={handleChange}\n      onMount={handleEditorDidMount}\n      theme={theme === 'dark' ? 'vs-dark' : 'light'}\n      options={{\n        readOnly,\n        minimap: {\n          enabled: shouldShowMinimap(),\n        },\n        lineNumbers: 'on',\n        tabSize: 2,\n        insertSpaces: true,\n        formatOnPaste: true,\n        automaticLayout: true,\n        scrollBeyondLastLine: false,\n        fontSize: 14,\n        fontFamily: 'JetBrains Mono, Menlo, Monaco, Courier New, monospace',\n        wordWrap: 'on',\n        smoothScrolling: true,\n        cursorBlinking: 'smooth',\n        cursorSmoothCaretAnimation: 'on',\n        renderWhitespace: 'selection',\n        bracketPairColorization: {\n          enabled: true,\n        },\n      }}\n      loading={\n        <div className=\"h-full flex items-center justify-center\">\n          <div className=\"text-sm text-muted-foreground\">Loading editor...</div>\n        </div>\n      }\n    />\n  );\n}\n","size_bytes":2793},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/GenerationProgress.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Check, Loader2, X, FileCode, Package, Palette } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { GenerationProgress as ProgressType } from \"@shared/schema\";\n\ninterface GenerationProgressProps {\n  progress: ProgressType;\n  onCancel?: () => void;\n}\n\nconst GENERATION_STEPS = [\n  { id: 'analyzing', label: 'Analyzing prompt', icon: Sparkles },\n  { id: 'planning', label: 'Planning structure', icon: Palette },\n  { id: 'generating', label: 'Generating code', icon: FileCode },\n  { id: 'dependencies', label: 'Setting up dependencies', icon: Package },\n  { id: 'complete', label: 'Complete', icon: Check }\n];\n\nexport function GenerationProgress({ progress, onCancel }: GenerationProgressProps) {\n  const getCurrentStepIndex = () => {\n    const step = progress.step.toLowerCase();\n    const stepMap: Record<string, number> = {\n      'analyzing': 0,\n      'analyzing your prompt': 0,\n      'planning': 1,\n      'planning project structure': 1,\n      'generating': 2,\n      'generating code': 2,\n      'dependencies': 3,\n      'finalizing': 3,\n      'finalizing project': 3,\n      'complete': 4\n    };\n    \n    for (const [key, value] of Object.entries(stepMap)) {\n      if (step.includes(key)) {\n        return value;\n      }\n    }\n    \n    return progress.progress < 30 ? 0 : progress.progress < 60 ? 2 : 3;\n  };\n  \n  const currentStepIndex = getCurrentStepIndex();\n  \n  return (\n    <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <Card className=\"max-w-md w-full p-6 space-y-6 animate-in fade-in zoom-in-95 duration-300\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n              {progress.complete ? (\n                <Check className=\"w-5 h-5 text-primary\" />\n              ) : (\n                <Loader2 className=\"w-5 h-5 text-primary animate-spin\" />\n              )}\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">\n                {progress.complete ? 'Generation Complete!' : 'Generating Application'}\n              </h3>\n              <p className=\"text-xs text-muted-foreground mt-0.5\">\n                {progress.complete ? 'Your app is ready' : 'AI is building your application...'}\n              </p>\n            </div>\n          </div>\n          \n          {!progress.complete && onCancel && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCancel}\n              className=\"h-8 w-8 p-0\"\n              data-testid=\"button-cancel\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Progress Bar */}\n        <div className=\"space-y-2\">\n          <Progress value={progress.progress} className=\"h-2\" />\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-muted-foreground\">{Math.round(progress.progress)}%</span>\n            {progress.currentFile && (\n              <span className=\"text-muted-foreground font-mono truncate max-w-[200px]\">\n                {progress.currentFile}\n              </span>\n            )}\n          </div>\n        </div>\n        \n        {/* Steps */}\n        <div className=\"space-y-2\">\n          {GENERATION_STEPS.map((step, index) => {\n            const Icon = step.icon;\n            const isComplete = index < currentStepIndex;\n            const isCurrent = index === currentStepIndex;\n            const isPending = index > currentStepIndex;\n            \n            return (\n              <div\n                key={step.id}\n                className={`\n                  flex items-center gap-3 p-3 rounded-md transition-all\n                  ${isCurrent ? 'bg-primary/10' : 'bg-transparent'}\n                `}\n                data-testid={`step-${step.id}`}\n              >\n                <div className={`\n                  w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\n                  ${isComplete ? 'bg-primary text-primary-foreground' : \n                    isCurrent ? 'bg-primary/20 text-primary' : \n                    'bg-muted text-muted-foreground'}\n                `}>\n                  {isComplete ? (\n                    <Check className=\"w-4 h-4\" />\n                  ) : isCurrent ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Icon className=\"w-4 h-4\" />\n                  )}\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <p className={`text-sm font-medium ${\n                    isComplete || isCurrent ? 'text-foreground' : 'text-muted-foreground'\n                  }`}>\n                    {step.label}\n                  </p>\n                  {isCurrent && progress.currentFile && (\n                    <p className=\"text-xs text-muted-foreground truncate mt-0.5 font-mono\">\n                      {progress.currentFile}\n                    </p>\n                  )}\n                </div>\n                \n                {isComplete && (\n                  <Check className=\"w-4 h-4 text-primary flex-shrink-0\" />\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        {progress.complete && (\n          <Button \n            className=\"w-full\"\n            onClick={onCancel}\n            data-testid=\"button-close\"\n          >\n            Close\n          </Button>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5804},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/lib/webcontainer.ts":{"content":"import { WebContainer } from '@webcontainer/api';\nimport type { ProjectFile } from '@shared/schema';\n\nexport interface TerminalOutput {\n  type: 'stdout' | 'stderr';\n  data: string;\n}\n\nexport interface WebContainerStatus {\n  isBooting: boolean;\n  isInstalling: boolean;\n  isStarting: boolean;\n  isReady: boolean;\n  serverUrl?: string;\n  error?: string;\n}\n\nexport class WebContainerManager {\n  private container: WebContainer | null = null;\n  private initPromise: Promise<void> | null = null;\n  private terminalOutputListeners: Set<(output: TerminalOutput) => void> = new Set();\n  private statusListeners: Set<(status: WebContainerStatus) => void> = new Set();\n  private status: WebContainerStatus = {\n    isBooting: false,\n    isInstalling: false,\n    isStarting: false,\n    isReady: false,\n  };\n\n  constructor() {}\n\n  /**\n   * Initialize the WebContainer instance\n   */\n  async init(): Promise<void> {\n    if (this.container) {\n      return;\n    }\n\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    this.initPromise = (async () => {\n      try {\n        this.updateStatus({ isBooting: true });\n        this.container = await WebContainer.boot();\n        this.updateStatus({ isBooting: false });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to boot WebContainer';\n        this.updateStatus({ \n          isBooting: false, \n          error: errorMessage \n        });\n        throw error;\n      }\n    })();\n\n    return this.initPromise;\n  }\n\n  /**\n   * Mount project files to the WebContainer filesystem\n   */\n  async mountFiles(files: ProjectFile[]): Promise<void> {\n    if (!this.container) {\n      throw new Error('WebContainer not initialized');\n    }\n\n    try {\n      // Convert flat file array to nested directory structure\n      const fileTree = this.buildFileTree(files);\n      await this.container.mount(fileTree);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to mount files';\n      this.updateStatus({ error: errorMessage });\n      throw error;\n    }\n  }\n\n  /**\n   * Install npm dependencies\n   */\n  async installDependencies(): Promise<void> {\n    if (!this.container) {\n      throw new Error('WebContainer not initialized');\n    }\n\n    try {\n      this.updateStatus({ isInstalling: true });\n      \n      const installProcess = await this.container.spawn('npm', ['install']);\n      \n      installProcess.output.pipeTo(\n        new WritableStream({\n          write: (data) => {\n            this.emitTerminalOutput({ type: 'stdout', data });\n          },\n        })\n      );\n\n      const exitCode = await installProcess.exit;\n      \n      if (exitCode !== 0) {\n        throw new Error(`npm install failed with exit code ${exitCode}`);\n      }\n\n      this.updateStatus({ isInstalling: false });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to install dependencies';\n      this.updateStatus({ \n        isInstalling: false, \n        error: errorMessage \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Start the development server\n   */\n  async startDevServer(command: string = 'npm run dev'): Promise<string> {\n    if (!this.container) {\n      throw new Error('WebContainer not initialized');\n    }\n\n    try {\n      this.updateStatus({ isStarting: true });\n\n      const [cmd, ...args] = command.split(' ');\n      const serverProcess = await this.container.spawn(cmd, args);\n\n      serverProcess.output.pipeTo(\n        new WritableStream({\n          write: (data) => {\n            this.emitTerminalOutput({ type: 'stdout', data });\n          },\n        })\n      );\n\n      // Wait for server to be ready and capture URL\n      const serverUrl = await new Promise<string>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('Server startup timeout'));\n        }, 60000); // 60 second timeout\n\n        this.container!.on('server-ready', (port, url) => {\n          clearTimeout(timeout);\n          resolve(url);\n        });\n\n        // Also listen for process exit as a failure condition\n        serverProcess.exit.then(exitCode => {\n          if (exitCode !== 0) {\n            clearTimeout(timeout);\n            reject(new Error(`Server process exited with code ${exitCode}`));\n          }\n        });\n      });\n\n      this.updateStatus({ \n        isStarting: false, \n        isReady: true, \n        serverUrl \n      });\n\n      return serverUrl;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to start dev server';\n      this.updateStatus({ \n        isStarting: false, \n        error: errorMessage \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Run the complete setup: mount files, install dependencies, start server\n   */\n  async setupProject(files: ProjectFile[], startCommand: string = 'npm run dev'): Promise<string> {\n    await this.init();\n    await this.mountFiles(files);\n    await this.installDependencies();\n    const serverUrl = await this.startDevServer(startCommand);\n    return serverUrl;\n  }\n\n  /**\n   * Execute a command in the container\n   */\n  async executeCommand(command: string, args: string[] = []): Promise<number> {\n    if (!this.container) {\n      throw new Error('WebContainer not initialized');\n    }\n\n    const process = await this.container.spawn(command, args);\n\n    process.output.pipeTo(\n      new WritableStream({\n        write: (data) => {\n          this.emitTerminalOutput({ type: 'stdout', data });\n        },\n      })\n    );\n\n    return await process.exit;\n  }\n\n  /**\n   * Update a file in the WebContainer filesystem\n   */\n  async updateFile(path: string, content: string): Promise<void> {\n    if (!this.container) {\n      throw new Error('WebContainer not initialized');\n    }\n\n    try {\n      await this.container.fs.writeFile(path, content);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update file';\n      console.error('Failed to update file in WebContainer:', error);\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Clean up and tear down the container\n   */\n  async teardown(): Promise<void> {\n    if (this.container) {\n      await this.container.teardown();\n      this.container = null;\n      this.initPromise = null;\n      this.updateStatus({\n        isBooting: false,\n        isInstalling: false,\n        isStarting: false,\n        isReady: false,\n        serverUrl: undefined,\n        error: undefined,\n      });\n    }\n  }\n\n  /**\n   * Subscribe to terminal output\n   */\n  onTerminalOutput(listener: (output: TerminalOutput) => void): () => void {\n    this.terminalOutputListeners.add(listener);\n    return () => {\n      this.terminalOutputListeners.delete(listener);\n    };\n  }\n\n  /**\n   * Subscribe to status changes\n   */\n  onStatusChange(listener: (status: WebContainerStatus) => void): () => void {\n    this.statusListeners.add(listener);\n    // Immediately emit current status\n    listener(this.status);\n    return () => {\n      this.statusListeners.delete(listener);\n    };\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus(): WebContainerStatus {\n    return { ...this.status };\n  }\n\n  /**\n   * Helper to build nested file tree from flat file array\n   */\n  private buildFileTree(files: ProjectFile[]): any {\n    const tree: any = {};\n\n    for (const file of files) {\n      const parts = file.path.split('/');\n      let current = tree;\n\n      for (let i = 0; i < parts.length - 1; i++) {\n        const part = parts[i];\n        if (!current[part]) {\n          current[part] = { directory: {} };\n        }\n        current = current[part].directory;\n      }\n\n      const fileName = parts[parts.length - 1];\n      current[fileName] = {\n        file: {\n          contents: file.content,\n        },\n      };\n    }\n\n    return tree;\n  }\n\n  /**\n   * Emit terminal output to all listeners\n   */\n  private emitTerminalOutput(output: TerminalOutput): void {\n    this.terminalOutputListeners.forEach(listener => listener(output));\n  }\n\n  /**\n   * Update status and notify listeners\n   */\n  private updateStatus(updates: Partial<WebContainerStatus>): void {\n    this.status = { ...this.status, ...updates };\n    this.statusListeners.forEach(listener => listener(this.status));\n  }\n}\n","size_bytes":8274},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const stored = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const initialTheme = stored || (prefersDark ? 'dark' : 'light');\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"w-4 h-4\" />\n      ) : (\n        <Sun className=\"w-4 h-4\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1124},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/storage.ts":{"content":"import { type User, type InsertUser, type ProjectFile, type GenerationResponse, type Project, type InsertProject } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { projects } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Project storage (session-based current project)\n  saveProject(sessionId: string, project: GenerationResponse): Promise<void>;\n  getProject(sessionId: string): Promise<GenerationResponse | undefined>;\n  clearProject(sessionId: string): Promise<void>;\n  \n  // Project history (database-backed)\n  saveToHistory(sessionId: string, name: string, project: GenerationResponse, templateId?: string): Promise<Project>;\n  getProjectHistory(sessionId: string): Promise<Project[]>;\n  getProjectById(id: number, sessionId: string): Promise<Project | undefined>;\n  deleteProject(id: number, sessionId: string): Promise<boolean>;\n}\n\nexport class DbStorage implements IStorage {\n  private users: Map<string, User>;\n  private currentProjects: Map<string, GenerationResponse>;\n\n  constructor() {\n    this.users = new Map();\n    this.currentProjects = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  async saveProject(sessionId: string, project: GenerationResponse): Promise<void> {\n    this.currentProjects.set(sessionId, project);\n  }\n  \n  async getProject(sessionId: string): Promise<GenerationResponse | undefined> {\n    return this.currentProjects.get(sessionId);\n  }\n  \n  async clearProject(sessionId: string): Promise<void> {\n    this.currentProjects.delete(sessionId);\n  }\n  \n  async saveToHistory(sessionId: string, name: string, project: GenerationResponse, templateId?: string): Promise<Project> {\n    const insertData: InsertProject = {\n      sessionId,\n      name,\n      prompt: project.description || '',\n      templateId: templateId || null,\n      files: project.files,\n      dependencies: project.dependencies,\n    };\n    \n    const [savedProject] = await db.insert(projects).values(insertData as any).returning();\n    return savedProject;\n  }\n  \n  async getProjectHistory(sessionId: string): Promise<Project[]> {\n    const history = await db\n      .select()\n      .from(projects)\n      .where(eq(projects.sessionId, sessionId))\n      .orderBy(desc(projects.createdAt));\n    \n    return history;\n  }\n  \n  async getProjectById(id: number, sessionId: string): Promise<Project | undefined> {\n    const [project] = await db\n      .select()\n      .from(projects)\n      .where(eq(projects.id, id))\n      .limit(1);\n    \n    // Verify project belongs to the requesting session\n    if (project && project.sessionId !== sessionId) {\n      return undefined;\n    }\n    \n    return project;\n  }\n  \n  async deleteProject(id: number, sessionId: string): Promise<boolean> {\n    const result = await db\n      .delete(projects)\n      .where(eq(projects.id, id))\n      .returning();\n    \n    // Check if project existed and belonged to the session\n    if (result.length === 0) {\n      return false;\n    }\n    \n    // Verify the deleted project belonged to the requesting session\n    if (result[0].sessionId !== sessionId) {\n      // This shouldn't happen in practice due to transaction isolation,\n      // but adding this check for extra security\n      return false;\n    }\n    \n    return true;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":3936},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/preview.ts":{"content":"import type { ProjectFile } from \"@shared/schema\";\n\n/**\n * Generate a standalone HTML preview that bundles all project files\n * This allows simple projects to run in an iframe without WebContainer\n */\nexport function generatePreviewHTML(files: ProjectFile[], dependencies?: Record<string, string>): string {\n  // Check if this is a React/Next.js/framework project\n  const isReactProject = files.some(f => \n    f.path.includes('App.jsx') || \n    f.path.includes('App.tsx') ||\n    f.path.includes('main.jsx') ||\n    f.path.includes('main.tsx')\n  );\n  \n  const isNextProject = files.some(f => \n    f.path.includes('pages/') || \n    f.path.includes('app/layout')\n  );\n  \n  const hasPackageJson = files.some(f => f.path === 'package.json');\n  const hasDependencies = dependencies && Object.keys(dependencies).length > 0;\n  \n  // If it's a framework project, show helpful message\n  if ((isReactProject || isNextProject || hasPackageJson) && hasDependencies) {\n    const frameworkName = isNextProject ? 'Next.js' : isReactProject ? 'React' : 'Framework';\n    const fileList = files.map(f => `<li><code>${f.path}</code></li>`).join('');\n    \n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${frameworkName} Project Preview</title>\n  <style>\n    * { margin: 0; padding: 0; box-sizing: border-box; }\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 20px;\n    }\n    .container {\n      background: white;\n      border-radius: 16px;\n      padding: 40px;\n      max-width: 600px;\n      box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n    }\n    h1 {\n      color: #333;\n      margin-bottom: 16px;\n      font-size: 28px;\n    }\n    .subtitle {\n      color: #666;\n      margin-bottom: 24px;\n      font-size: 16px;\n    }\n    .info-box {\n      background: #f8f9fa;\n      border-left: 4px solid #667eea;\n      padding: 16px;\n      margin: 20px 0;\n      border-radius: 4px;\n    }\n    .info-box h3 {\n      color: #667eea;\n      font-size: 14px;\n      text-transform: uppercase;\n      margin-bottom: 8px;\n      font-weight: 600;\n    }\n    .file-list {\n      max-height: 200px;\n      overflow-y: auto;\n      margin-top: 12px;\n      padding-left: 20px;\n    }\n    .file-list li {\n      margin: 4px 0;\n      color: #555;\n      font-size: 14px;\n    }\n    code {\n      background: #e9ecef;\n      padding: 2px 6px;\n      border-radius: 3px;\n      font-size: 13px;\n      color: #333;\n    }\n    .note {\n      margin-top: 20px;\n      padding: 12px;\n      background: #fff3cd;\n      border-radius: 4px;\n      color: #856404;\n      font-size: 14px;\n      line-height: 1.6;\n    }\n    .steps {\n      margin-top: 16px;\n      padding-left: 20px;\n    }\n    .steps li {\n      margin: 8px 0;\n      color: #555;\n    }\n    .icon {\n      font-size: 48px;\n      margin-bottom: 20px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"icon\">⚛️</div>\n    <h1>${frameworkName} Project Generated!</h1>\n    <p class=\"subtitle\">Your project has been successfully generated with ${files.length} files.</p>\n    \n    <div class=\"info-box\">\n      <h3>📁 Generated Files</h3>\n      <ul class=\"file-list\">\n        ${fileList}\n      </ul>\n    </div>\n    \n    <div class=\"note\">\n      <strong>⚡ Live Preview Not Available</strong><br>\n      This ${frameworkName} project requires npm modules and a build process to run. \n      The generated code is ready to download and run locally!\n    </div>\n    \n    <div class=\"info-box\">\n      <h3>🚀 To Run This Project Locally:</h3>\n      <ol class=\"steps\">\n        <li>Download the generated files</li>\n        <li>Run <code>npm install</code> to install dependencies</li>\n        <li>Run <code>npm run dev</code> to start the development server</li>\n        <li>Open your browser to view the application</li>\n      </ol>\n    </div>\n  </div>\n</body>\n</html>\n    `.trim();\n  }\n  \n  // For vanilla HTML/CSS/JS projects, bundle them normally\n  const htmlFile = files.find(f => f.path.endsWith('.html') || f.path === 'index.html');\n  const cssFiles = files.filter(f => f.language === 'css');\n  const jsFiles = files.filter(f => f.language === 'javascript');\n  \n  if (!htmlFile) {\n    // Generate a basic HTML structure if none exists\n    const styles = cssFiles.map(f => f.content).join('\\n');\n    const scripts = jsFiles.map(f => f.content).join('\\n');\n    \n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Generated Application</title>\n  <style>\n    ${styles}\n  </style>\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script>\n    ${scripts}\n  </script>\n</body>\n</html>\n    `.trim();\n  }\n  \n  let html = htmlFile.content;\n  \n  // Inject CSS into the HTML\n  if (cssFiles.length > 0) {\n    const styleTag = `\\n<style>\\n${cssFiles.map(f => `/* ${f.path} */\\n${f.content}`).join('\\n\\n')}\\n</style>`;\n    if (html.includes('</head>')) {\n      html = html.replace('</head>', `${styleTag}\\n</head>`);\n    } else {\n      html = `<head>${styleTag}</head>${html}`;\n    }\n  }\n  \n  // Inject JavaScript into the HTML\n  if (jsFiles.length > 0) {\n    const scriptTag = `\\n<script>\\n${jsFiles.map(f => `// ${f.path}\\n${f.content}`).join('\\n\\n')}\\n</script>`;\n    if (html.includes('</body>')) {\n      html = html.replace('</body>', `${scriptTag}\\n</body>`);\n    } else {\n      html = `${html}\\n${scriptTag}`;\n    }\n  }\n  \n  return html;\n}\n\n/**\n * Check if a project can be previewed with simple iframe (static HTML/CSS/JS)\n * vs requiring WebContainer (React, build tools, etc.)\n */\nexport function canUseSimplePreview(files: ProjectFile[], dependencies: Record<string, string>): boolean {\n  // If there are npm dependencies, we need WebContainer\n  if (Object.keys(dependencies).length > 0) {\n    return false;\n  }\n  \n  // If there are TypeScript or JSX files, we need a build step\n  const hasTypeScript = files.some(f => \n    f.language === 'typescript' || \n    f.path.endsWith('.tsx') || \n    f.path.endsWith('.ts') ||\n    f.path.endsWith('.jsx')\n  );\n  if (hasTypeScript) {\n    return false;\n  }\n  \n  // If there are build config files, we need WebContainer\n  const hasBuildConfig = files.some(f => \n    f.path.includes('package.json') || \n    f.path.includes('vite.config') || \n    f.path.includes('next.config') ||\n    f.path.includes('tsconfig.json') ||\n    f.path.includes('webpack.config') ||\n    f.path.includes('rollup.config')\n  );\n  if (hasBuildConfig) {\n    return false;\n  }\n  \n  // Check for modern framework indicators\n  const hasFrameworkFiles = files.some(f => \n    f.path.includes('src/App.jsx') ||\n    f.path.includes('src/App.tsx') ||\n    f.path.includes('src/main.jsx') ||\n    f.path.includes('src/main.tsx') ||\n    f.path.includes('pages/_app') ||\n    f.path.includes('app/layout')\n  );\n  if (hasFrameworkFiles) {\n    return false;\n  }\n  \n  // Otherwise, it's simple HTML/CSS/JS that can run in an iframe\n  return true;\n}\n","size_bytes":7210},"client/src/components/Workspace.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileTree } from \"./FileTree\";\nimport { CodeEditor } from \"./CodeEditor\";\nimport { PreviewPanel } from \"./PreviewPanel\";\nimport { PromptInput } from \"./PromptInput\";\nimport { GenerationProgress } from \"./GenerationProgress\";\nimport { EmptyState } from \"./EmptyState\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { ProjectHistory } from \"./ProjectHistory\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Sparkles, FolderTree, FileCode, Eye, ChevronLeft, ChevronRight, Save, History } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { WebContainerManager } from \"@/lib/webcontainer\";\nimport type { ProjectFile, GenerationProgress as ProgressType, GenerationResponse, Template, Project } from \"@shared/schema\";\n\ninterface WorkspaceProps {\n  onGenerate: (prompt: string, template?: string) => Promise<GenerationResponse>;\n  generatedProject?: GenerationResponse | null;\n  isGenerating?: boolean;\n  streamingStatus?: string;\n  streamingFileName?: string;\n  streamingProgress?: number;\n  selectedTemplate?: Template['id'];\n  onTemplateChange?: (templateId?: Template['id']) => void;\n}\n\nexport function Workspace({ \n  onGenerate, \n  generatedProject, \n  isGenerating: externalIsGenerating,\n  streamingStatus,\n  streamingFileName,\n  streamingProgress,\n  selectedTemplate,\n  onTemplateChange\n}: WorkspaceProps) {\n  const [files, setFiles] = useState<ProjectFile[]>([]);\n  const [selectedFile, setSelectedFile] = useState<ProjectFile | undefined>();\n  const [progress, setProgress] = useState<ProgressType | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string>();\n  const [showPrompt, setShowPrompt] = useState(true);\n  const [leftPanelCollapsed, setLeftPanelCollapsed] = useState(false);\n  const [useWebContainer, setUseWebContainer] = useState(false);\n  const [webContainerError, setWebContainerError] = useState<string>();\n  const [modifiedFiles, setModifiedFiles] = useState<Set<string>>(new Set());\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [showHistory, setShowHistory] = useState(false);\n  const [projectName, setProjectName] = useState(\"\");\n  const [currentProjectData, setCurrentProjectData] = useState<GenerationResponse | null>(null);\n  \n  const { toast } = useToast();\n  const webContainerRef = useRef<WebContainerManager | null>(null);\n  const isGenerating = externalIsGenerating || false;\n  const hasProject = files.length > 0;\n  \n  // Initialize WebContainer manager once\n  useEffect(() => {\n    if (!webContainerRef.current) {\n      webContainerRef.current = new WebContainerManager();\n    }\n    \n    return () => {\n      // Cleanup on unmount\n      if (webContainerRef.current) {\n        webContainerRef.current.teardown();\n      }\n    };\n  }, []);\n  \n  // Determine if project needs WebContainer\n  const needsWebContainer = (project: GenerationResponse): boolean => {\n    const { files, dependencies } = project;\n    \n    // Has npm dependencies\n    if (Object.keys(dependencies).length > 0) {\n      return true;\n    }\n    \n    // Has TypeScript or JSX files\n    const hasTypeScript = files.some(f => \n      f.language === 'typescript' || \n      f.path.endsWith('.tsx') || \n      f.path.endsWith('.ts') ||\n      f.path.endsWith('.jsx')\n    );\n    if (hasTypeScript) {\n      return true;\n    }\n    \n    // Has build config files\n    const hasBuildConfig = files.some(f => \n      f.path.includes('package.json') || \n      f.path.includes('vite.config') || \n      f.path.includes('next.config') ||\n      f.path.includes('tsconfig.json')\n    );\n    if (hasBuildConfig) {\n      return true;\n    }\n    \n    return false;\n  };\n  \n  // Setup WebContainer when project is generated\n  const setupWebContainerProject = async (project: GenerationResponse) => {\n    if (!webContainerRef.current) {\n      setWebContainerError('WebContainer not initialized');\n      return;\n    }\n\n    try {\n      setWebContainerError(undefined);\n      \n      // Setup the project in WebContainer\n      const serverUrl = await webContainerRef.current.setupProject(\n        project.files,\n        'npm run dev'\n      );\n      \n      setPreviewUrl(serverUrl);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to setup WebContainer';\n      console.error('WebContainer setup error:', error);\n      setWebContainerError(errorMessage);\n      \n      // Fallback to simple preview on error\n      setUseWebContainer(false);\n      setPreviewUrl('/api/preview');\n    }\n  };\n  \n  // Update files when project is generated\n  useEffect(() => {\n    if (generatedProject) {\n      setFiles(generatedProject.files);\n      setCurrentProjectData(generatedProject);\n      setShowPrompt(false);\n      if (generatedProject.files.length > 0) {\n        setSelectedFile(generatedProject.files[0]);\n      }\n      \n      // Determine preview method\n      const needsContainer = needsWebContainer(generatedProject);\n      setUseWebContainer(needsContainer);\n      \n      if (needsContainer) {\n        // Use WebContainer for complex projects\n        setupWebContainerProject(generatedProject);\n      } else {\n        // Use simple preview for static HTML/CSS/JS\n        setPreviewUrl('/api/preview');\n      }\n      \n      // Mark generation as complete\n      setProgress({\n        step: 'complete',\n        progress: 100,\n        complete: true\n      });\n      \n      // Auto-close progress after a delay\n      setTimeout(() => {\n        setProgress(null);\n      }, 2000);\n    }\n  }, [generatedProject]);\n  \n  // Show progress during generation using streaming data\n  useEffect(() => {\n    if (isGenerating) {\n      setShowPrompt(false);\n      setProgress({\n        step: streamingStatus || 'Starting...',\n        currentFile: streamingFileName,\n        progress: streamingProgress || 0,\n        complete: false\n      });\n    } else if (!isGenerating && progress && !progress.complete) {\n      setProgress(null);\n    }\n  }, [isGenerating, streamingStatus, streamingFileName, streamingProgress]);\n  \n  const handleGenerate = async (prompt: string, template?: string) => {\n    try {\n      await onGenerate(prompt, template);\n    } catch (error) {\n      console.error(\"Generation failed:\", error);\n      setProgress(null);\n      setShowPrompt(true);\n    }\n  };\n  \n  const handleCancelGeneration = () => {\n    setProgress(null);\n    if (!hasProject) {\n      setShowPrompt(true);\n    }\n  };\n  \n  const handleUpdateFile = async (file: ProjectFile, newContent: string) => {\n    // Update the file in the files array\n    const updatedFiles = files.map(f => \n      f.path === file.path ? { ...f, content: newContent } : f\n    );\n    setFiles(updatedFiles);\n    \n    // Update selected file if it's the one being edited\n    if (selectedFile?.path === file.path) {\n      setSelectedFile({ ...file, content: newContent });\n    }\n    \n    // Mark file as modified\n    setModifiedFiles(prev => new Set(prev).add(file.path));\n    \n    // Sync to WebContainer if active\n    if (useWebContainer && webContainerRef.current) {\n      try {\n        await webContainerRef.current.updateFile(file.path, newContent);\n      } catch (error) {\n        console.error('Failed to sync file to WebContainer:', error);\n      }\n    }\n  };\n\n  const saveMutation = useMutation({\n    mutationFn: async ({ name, templateId }: { name: string; templateId?: string }) => {\n      return await apiRequest('POST', '/api/projects/save', { name, templateId });\n    },\n    onSuccess: () => {\n      setShowSaveDialog(false);\n      setProjectName(\"\");\n      toast({\n        title: \"Project saved\",\n        description: \"Your project has been saved to history.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Save failed\",\n        description: error instanceof Error ? error.message : \"Failed to save project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleSaveProject = () => {\n    setShowSaveDialog(true);\n    if (currentProjectData) {\n      const defaultName = currentProjectData.projectName || \n        (currentProjectData.description?.substring(0, 50) || 'Untitled Project');\n      setProjectName(defaultName);\n    }\n  };\n  \n  const handleConfirmSave = () => {\n    if (!projectName.trim()) {\n      toast({\n        title: \"Name required\",\n        description: \"Please enter a project name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveMutation.mutate({ \n      name: projectName.trim(), \n      templateId: selectedTemplate \n    });\n  };\n  \n  const handleLoadProject = (project: Project) => {\n    const projectData: GenerationResponse = {\n      files: project.files,\n      dependencies: project.dependencies,\n      projectName: project.name,\n      description: project.prompt,\n    };\n    \n    setFiles(project.files);\n    setCurrentProjectData(projectData);\n    setShowPrompt(false);\n    if (project.files.length > 0) {\n      setSelectedFile(project.files[0]);\n    }\n    \n    const needsContainer = needsWebContainer(projectData);\n    setUseWebContainer(needsContainer);\n    \n    if (needsContainer) {\n      setupWebContainerProject(projectData);\n    } else {\n      setPreviewUrl('/api/preview');\n    }\n    \n    setModifiedFiles(new Set());\n  };\n\n  const handleNewProject = async () => {\n    if (useWebContainer && webContainerRef.current) {\n      try {\n        await webContainerRef.current.teardown();\n      } catch (error) {\n        console.error('Failed to teardown WebContainer:', error);\n      }\n    }\n    \n    setFiles([]);\n    setSelectedFile(undefined);\n    setPreviewUrl(undefined);\n    setShowPrompt(true);\n    setProgress(null);\n    setUseWebContainer(false);\n    setWebContainerError(undefined);\n    setModifiedFiles(new Set());\n    setCurrentProjectData(null);\n  };\n  \n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <header className=\"flex items-center justify-between px-6 py-3 border-b border-border bg-card\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-primary/10 flex items-center justify-center\">\n            <Sparkles className=\"w-5 h-5 text-primary\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\">AI Website Builder</h1>\n            <p className=\"text-xs text-muted-foreground\">Build with intelligence</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {hasProject && (\n            <>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleSaveProject}\n                className=\"gap-2\"\n                data-testid=\"button-save-project\"\n              >\n                <Save className=\"w-3.5 h-3.5\" />\n                Save Project\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowHistory(true)}\n                className=\"gap-2\"\n                data-testid=\"button-history\"\n              >\n                <History className=\"w-3.5 h-3.5\" />\n                History\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleNewProject}\n                className=\"gap-2\"\n                data-testid=\"button-new-project\"\n              >\n                <Sparkles className=\"w-3.5 h-3.5\" />\n                New Project\n              </Button>\n            </>\n          )}\n          <ThemeToggle />\n        </div>\n      </header>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        {!hasProject && showPrompt ? (\n          <PromptInput \n            onGenerate={handleGenerate}\n            isGenerating={isGenerating}\n            selectedTemplate={selectedTemplate}\n            onTemplateChange={onTemplateChange}\n          />\n        ) : showPrompt ? (\n          <div className=\"h-full overflow-auto\">\n            <PromptInput \n              onGenerate={handleGenerate}\n              isGenerating={isGenerating}\n              selectedTemplate={selectedTemplate}\n              onTemplateChange={onTemplateChange}\n            />\n          </div>\n        ) : (\n          <div className=\"h-full flex\">\n            {/* Left Panel - File Explorer */}\n            <div className={`\n              border-r border-border bg-sidebar transition-all duration-300 flex-shrink-0\n              ${leftPanelCollapsed ? 'w-0' : 'w-64'}\n            `}>\n              {!leftPanelCollapsed && (\n                <div className=\"h-full flex flex-col\">\n                  <div className=\"flex items-center justify-between px-4 py-3 border-b border-sidebar-border\">\n                    <div className=\"flex items-center gap-2 text-sm font-medium text-sidebar-foreground\">\n                      <FolderTree className=\"w-4 h-4\" />\n                      Files\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setLeftPanelCollapsed(true)}\n                      className=\"h-7 w-7 p-0\"\n                      data-testid=\"button-collapse-left\"\n                    >\n                      <ChevronLeft className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex-1 overflow-hidden\">\n                    <FileTree\n                      files={files}\n                      onFileSelect={setSelectedFile}\n                      selectedFile={selectedFile?.path}\n                      modifiedFiles={modifiedFiles}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {leftPanelCollapsed && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLeftPanelCollapsed(false)}\n                className=\"absolute left-0 top-20 z-10 h-8 w-8 p-0 rounded-r-md rounded-l-none border border-l-0\"\n                data-testid=\"button-expand-left\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Center Panel - Code Editor */}\n            <div className=\"flex-1 flex flex-col min-w-0\">\n              <div className=\"flex items-center gap-2 px-4 py-3 border-b border-border bg-card\">\n                <FileCode className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium text-foreground\">Code</span>\n              </div>\n              <div className=\"flex-1 overflow-hidden\">\n                <CodeEditor \n                  file={selectedFile} \n                  onSave={handleUpdateFile}\n                  modifiedFiles={modifiedFiles}\n                />\n              </div>\n            </div>\n            \n            {/* Right Panel - Preview */}\n            <div className=\"flex-1 flex flex-col min-w-0 border-l border-border\">\n              <div className=\"flex items-center gap-2 px-4 py-3 border-b border-border bg-card\">\n                <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium text-foreground\">Preview</span>\n              </div>\n              <div className=\"flex-1 overflow-hidden\">\n                <PreviewPanel\n                  previewUrl={previewUrl}\n                  isLoading={isGenerating}\n                  error={webContainerError}\n                  webContainer={webContainerRef.current || undefined}\n                  useWebContainer={useWebContainer}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Generation Progress Overlay */}\n      {progress && !progress.complete && (\n        <GenerationProgress\n          progress={progress}\n          onCancel={handleCancelGeneration}\n        />\n      )}\n      \n      {/* Save Project Dialog */}\n      <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>\n        <DialogContent data-testid=\"dialog-save-project\">\n          <DialogHeader>\n            <DialogTitle>Save Project</DialogTitle>\n            <DialogDescription>\n              Enter a name for your project to save it to history\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <Label htmlFor=\"project-name\">Project Name</Label>\n            <Input\n              id=\"project-name\"\n              value={projectName}\n              onChange={(e) => setProjectName(e.target.value)}\n              placeholder=\"My Awesome Project\"\n              className=\"mt-2\"\n              data-testid=\"input-project-name\"\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  handleConfirmSave();\n                }\n              }}\n            />\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowSaveDialog(false)}\n              data-testid=\"button-cancel-save\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleConfirmSave}\n              disabled={saveMutation.isPending}\n              data-testid=\"button-confirm-save\"\n            >\n              {saveMutation.isPending ? \"Saving...\" : \"Save\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Project History Panel */}\n      <ProjectHistory\n        open={showHistory}\n        onOpenChange={setShowHistory}\n        onLoadProject={handleLoadProject}\n      />\n    </div>\n  );\n}\n","size_bytes":17987},"client/src/components/EmptyState.tsx":{"content":"import { Sparkles, Code2, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface EmptyStateProps {\n  onGetStarted?: () => void;\n}\n\nexport function EmptyState({ onGetStarted }: EmptyStateProps) {\n  return (\n    <div className=\"flex items-center justify-center h-full w-full p-8\">\n      <div className=\"max-w-md text-center space-y-6\">\n        {/* Illustration */}\n        <div className=\"relative mx-auto w-48 h-48\">\n          <div className=\"absolute inset-0 bg-primary/10 rounded-full blur-3xl\" />\n          <div className=\"relative flex items-center justify-center h-full\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"w-20 h-20 bg-card border border-card-border rounded-md flex items-center justify-center\">\n                <Code2 className=\"w-10 h-10 text-muted-foreground\" />\n              </div>\n              <div className=\"w-20 h-20 bg-card border border-card-border rounded-md flex items-center justify-center\">\n                <Zap className=\"w-10 h-10 text-primary\" />\n              </div>\n              <div className=\"w-20 h-20 bg-primary/10 border border-primary/20 rounded-md flex items-center justify-center col-span-2\">\n                <Sparkles className=\"w-10 h-10 text-primary\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"space-y-3\">\n          <h2 className=\"text-2xl font-semibold text-foreground\">\n            Build Anything with AI\n          </h2>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\">\n            Describe your web application in plain English and watch as AI generates a complete, working project with live preview. From simple landing pages to complex applications.\n          </p>\n        </div>\n\n        {/* CTA */}\n        {onGetStarted && (\n          <Button \n            size=\"lg\" \n            onClick={onGetStarted}\n            className=\"gap-2\"\n            data-testid=\"button-get-started\"\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            Get Started\n          </Button>\n        )}\n\n        {/* Features */}\n        <div className=\"grid grid-cols-3 gap-4 pt-4 text-xs text-muted-foreground\">\n          <div className=\"space-y-1\">\n            <Code2 className=\"w-5 h-5 mx-auto text-primary\" />\n            <div>Multiple Frameworks</div>\n          </div>\n          <div className=\"space-y-1\">\n            <Zap className=\"w-5 h-5 mx-auto text-primary\" />\n            <div>Live Preview</div>\n          </div>\n          <div className=\"space-y-1\">\n            <Sparkles className=\"w-5 h-5 mx-auto text-primary\" />\n            <div>AI Powered</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2743},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 4% 98%;\n\n  --foreground: 210 6% 12%;\n\n  --border: 210 5% 88%;\n\n  --card: 210 4% 96%;\n\n  --card-foreground: 210 6% 14%;\n\n  --card-border: 210 5% 90%;\n\n  --sidebar: 210 4% 94%;\n\n  --sidebar-foreground: 210 6% 16%;\n\n  --sidebar-border: 210 5% 86%;\n\n  --sidebar-primary: 217 91% 35%;\n\n  --sidebar-primary-foreground: 217 91% 98%;\n\n  --sidebar-accent: 210 8% 88%;\n\n  --sidebar-accent-foreground: 210 6% 16%;\n\n  --sidebar-ring: 217 91% 35%;\n\n  --popover: 210 4% 92%;\n\n  --popover-foreground: 210 6% 16%;\n\n  --popover-border: 210 5% 84%;\n\n  --primary: 217 91% 35%;\n\n  --primary-foreground: 217 91% 98%;\n\n  --secondary: 210 7% 87%;\n\n  --secondary-foreground: 210 6% 16%;\n\n  --muted: 210 8% 90%;\n\n  --muted-foreground: 210 5% 40%;\n\n  --accent: 210 10% 89%;\n\n  --accent-foreground: 210 6% 16%;\n\n  --destructive: 0 84% 40%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 210 6% 75%;\n  --ring: 217 91% 35%;\n  --chart-1: 217 91% 35%;\n  --chart-2: 173 58% 39%;\n  --chart-3: 43 96% 56%;\n  --chart-4: 27 87% 57%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 0px 0px hsl(210 10% 10% / 0.04);\n  --shadow-xs: 0px 1px 2px 0px hsl(210 10% 10% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(210 10% 10% / 0.08), 0px 1px 2px -1px hsl(210 10% 10% / 0.06);\n  --shadow: 0px 2px 4px -1px hsl(210 10% 10% / 0.08), 0px 4px 6px -1px hsl(210 10% 10% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(210 10% 10% / 0.08), 0px 2px 4px -1px hsl(210 10% 10% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 10% 10% / 0.10), 0px 4px 6px -2px hsl(210 10% 10% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 10% 10% / 0.10), 0px 10px 10px -5px hsl(210 10% 10% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 10% 10% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 5% 8%;\n\n  --foreground: 210 4% 92%;\n\n  --border: 210 5% 18%;\n\n  --card: 210 5% 11%;\n\n  --card-foreground: 210 4% 90%;\n\n  --card-border: 210 5% 20%;\n\n  --sidebar: 210 5% 14%;\n\n  --sidebar-foreground: 210 4% 88%;\n\n  --sidebar-border: 210 5% 22%;\n\n  --sidebar-primary: 217 91% 35%;\n\n  --sidebar-primary-foreground: 217 91% 98%;\n\n  --sidebar-accent: 210 8% 20%;\n\n  --sidebar-accent-foreground: 210 4% 88%;\n\n  --sidebar-ring: 217 91% 45%;\n\n  --popover: 210 5% 16%;\n\n  --popover-foreground: 210 4% 88%;\n\n  --popover-border: 210 5% 24%;\n\n  --primary: 217 91% 35%;\n\n  --primary-foreground: 217 91% 98%;\n\n  --secondary: 210 6% 22%;\n\n  --secondary-foreground: 210 4% 88%;\n\n  --muted: 210 7% 18%;\n\n  --muted-foreground: 210 4% 65%;\n\n  --accent: 210 9% 19%;\n\n  --accent-foreground: 210 4% 88%;\n\n  --destructive: 0 84% 40%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 210 6% 35%;\n  --ring: 217 91% 45%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 173 58% 60%;\n  --chart-3: 43 96% 65%;\n  --chart-4: 27 87% 65%;\n  --chart-5: 340 82% 65%;\n\n  --shadow-2xs: 0px 1px 0px 0px hsl(210 10% 0% / 0.20);\n  --shadow-xs: 0px 1px 2px 0px hsl(210 10% 0% / 0.30);\n  --shadow-sm: 0px 1px 3px 0px hsl(210 10% 0% / 0.35), 0px 1px 2px -1px hsl(210 10% 0% / 0.30);\n  --shadow: 0px 2px 4px -1px hsl(210 10% 0% / 0.35), 0px 4px 6px -1px hsl(210 10% 0% / 0.40);\n  --shadow-md: 0px 4px 6px -1px hsl(210 10% 0% / 0.35), 0px 2px 4px -1px hsl(210 10% 0% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 10% 0% / 0.40), 0px 4px 6px -2px hsl(210 10% 0% / 0.25);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 10% 0% / 0.45), 0px 10px 10px -5px hsl(210 10% 0% / 0.20);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 10% 0% / 0.60);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  \n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11393},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/FileTree.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronRight, ChevronDown, File, Folder, FolderOpen } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { ProjectFile } from \"@shared/schema\";\n\ninterface FileTreeProps {\n  files: ProjectFile[];\n  onFileSelect?: (file: ProjectFile) => void;\n  selectedFile?: string;\n  modifiedFiles?: Set<string>;\n}\n\ninterface TreeNode {\n  name: string;\n  path: string;\n  type: 'file' | 'folder';\n  children?: TreeNode[];\n  file?: ProjectFile;\n}\n\nfunction buildTree(files: ProjectFile[]): TreeNode[] {\n  const root: TreeNode[] = [];\n  \n  files.forEach(file => {\n    const parts = file.path.split('/');\n    let currentLevel = root;\n    \n    parts.forEach((part, index) => {\n      const isFile = index === parts.length - 1;\n      const path = parts.slice(0, index + 1).join('/');\n      \n      let node = currentLevel.find(n => n.name === part);\n      \n      if (!node) {\n        node = {\n          name: part,\n          path,\n          type: isFile ? 'file' : 'folder',\n          children: isFile ? undefined : [],\n          file: isFile ? file : undefined\n        };\n        currentLevel.push(node);\n      }\n      \n      if (!isFile && node.children) {\n        currentLevel = node.children;\n      }\n    });\n  });\n  \n  return root;\n}\n\nfunction TreeItem({ \n  node, \n  level = 0, \n  onFileSelect, \n  selectedFile,\n  modifiedFiles\n}: { \n  node: TreeNode; \n  level?: number; \n  onFileSelect?: (file: ProjectFile) => void;\n  selectedFile?: string;\n  modifiedFiles?: Set<string>;\n}) {\n  const [isOpen, setIsOpen] = useState(level === 0);\n  \n  const handleClick = () => {\n    if (node.type === 'folder') {\n      setIsOpen(!isOpen);\n    } else if (node.file && onFileSelect) {\n      onFileSelect(node.file);\n    }\n  };\n  \n  const isSelected = selectedFile === node.path;\n  const isModified = node.type === 'file' && modifiedFiles?.has(node.path);\n  \n  return (\n    <div>\n      <div\n        className={`\n          flex items-center gap-2 py-1.5 px-2 rounded-md cursor-pointer text-sm\n          hover-elevate active-elevate-2\n          ${isSelected ? 'bg-accent text-accent-foreground' : 'text-foreground'}\n        `}\n        style={{ paddingLeft: `${level * 12 + 8}px` }}\n        onClick={handleClick}\n        data-testid={`tree-item-${node.path}`}\n      >\n        {node.type === 'folder' ? (\n          <>\n            {isOpen ? (\n              <ChevronDown className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n            ) : (\n              <ChevronRight className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n            )}\n            {isOpen ? (\n              <FolderOpen className=\"w-4 h-4 text-primary flex-shrink-0\" />\n            ) : (\n              <Folder className=\"w-4 h-4 text-primary flex-shrink-0\" />\n            )}\n          </>\n        ) : (\n          <>\n            <div className=\"w-4\" />\n            <File className=\"w-4 h-4 text-muted-foreground flex-shrink-0\" />\n          </>\n        )}\n        <span className=\"truncate flex-1\">{node.name}</span>\n        {isModified && (\n          <div className=\"w-2 h-2 rounded-full bg-primary flex-shrink-0\" title=\"Modified\" />\n        )}\n      </div>\n      \n      {node.type === 'folder' && isOpen && node.children && (\n        <div>\n          {node.children.map((child, idx) => (\n            <TreeItem\n              key={idx}\n              node={child}\n              level={level + 1}\n              onFileSelect={onFileSelect}\n              selectedFile={selectedFile}\n              modifiedFiles={modifiedFiles}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport function FileTree({ files, onFileSelect, selectedFile, modifiedFiles }: FileTreeProps) {\n  const tree = buildTree(files);\n  \n  if (files.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-sm text-muted-foreground p-4\">\n        No files generated yet\n      </div>\n    );\n  }\n  \n  return (\n    <ScrollArea className=\"h-full\">\n      <div className=\"p-2 space-y-0.5\">\n        {tree.map((node, idx) => (\n          <TreeItem\n            key={idx}\n            node={node}\n            onFileSelect={onFileSelect}\n            selectedFile={selectedFile}\n            modifiedFiles={modifiedFiles}\n          />\n        ))}\n      </div>\n    </ScrollArea>\n  );\n}\n","size_bytes":4315},"client/src/components/TemplateSelector.tsx":{"content":"import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Code, Layers, Sparkles } from \"lucide-react\";\nimport { TEMPLATES, type Template } from \"@shared/schema\";\nimport { SiReact, SiNextdotjs } from \"react-icons/si\";\n\ninterface TemplateSelectorProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  selectedTemplate?: Template['id'];\n  onSelectTemplate: (templateId: Template['id']) => void;\n}\n\nconst TEMPLATE_ICONS = {\n  'react': SiReact,\n  'nextjs': SiNextdotjs,\n  'vanilla': Code,\n};\n\nexport function TemplateSelector({ open, onOpenChange, selectedTemplate, onSelectTemplate }: TemplateSelectorProps) {\n  const handleSelect = (templateId: Template['id']) => {\n    onSelectTemplate(templateId);\n    onOpenChange(false);\n  };\n\n  const getIcon = (iconName: string) => {\n    const IconComponent = TEMPLATE_ICONS[iconName as keyof typeof TEMPLATE_ICONS] || Code;\n    return IconComponent;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl\" data-testid=\"dialog-template-selector\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Layers className=\"w-5 h-5 text-primary\" />\n            Choose Your Framework\n          </DialogTitle>\n          <DialogDescription>\n            Select a template to get started with your project. Each template is optimized for different use cases.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4\">\n          {TEMPLATES.map((template) => {\n            const IconComponent = getIcon(template.icon);\n            const isSelected = selectedTemplate === template.id;\n            \n            return (\n              <Card\n                key={template.id}\n                className={`p-6 cursor-pointer hover-elevate active-elevate-2 transition-all relative ${\n                  isSelected ? 'ring-2 ring-primary' : ''\n                }`}\n                onClick={() => handleSelect(template.id)}\n                data-testid={`card-template-${template.id}`}\n              >\n                {isSelected && (\n                  <div className=\"absolute top-3 right-3 w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                    <Check className=\"w-4 h-4 text-primary-foreground\" data-testid={`icon-selected-${template.id}`} />\n                  </div>\n                )}\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className={`p-3 rounded-md ${\n                      template.id === 'react-vite' ? 'bg-cyan-500/10 text-cyan-600 dark:text-cyan-400' :\n                      template.id === 'nextjs' ? 'bg-slate-900/10 text-slate-900 dark:text-slate-100' :\n                      'bg-yellow-500/10 text-yellow-600 dark:text-yellow-400'\n                    }`}>\n                      <IconComponent className=\"w-8 h-8\" />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-semibold text-foreground\">\n                      {template.name}\n                    </h3>\n                    <p className=\"text-xs text-muted-foreground line-clamp-3\">\n                      {template.description}\n                    </p>\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-1.5\">\n                    {template.techStack.map((tech, idx) => (\n                      <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                        {tech}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  <Button\n                    variant={isSelected ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    className=\"w-full\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleSelect(template.id);\n                    }}\n                    data-testid={`button-select-${template.id}`}\n                  >\n                    {isSelected ? (\n                      <>\n                        <Check className=\"w-3 h-3 mr-1\" />\n                        Selected\n                      </>\n                    ) : (\n                      'Select Template'\n                    )}\n                  </Button>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"flex items-center gap-2 mt-4 p-3 bg-muted/50 rounded-md\">\n          <Sparkles className=\"w-4 h-4 text-primary\" />\n          <p className=\"text-xs text-muted-foreground\">\n            Don't worry, you can always describe a different setup in your prompt. These templates provide a starting point.\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5063},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table (keeping existing structure)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Projects table for saving project history\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: text(\"session_id\").notNull(),\n  name: text(\"name\").notNull(),\n  prompt: text(\"prompt\").notNull(),\n  templateId: text(\"template_id\"),\n  files: jsonb(\"files\").notNull().$type<ProjectFile[]>(),\n  dependencies: jsonb(\"dependencies\").notNull().$type<Record<string, string>>(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).notNull().defaultNow(),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\n// Project generation data structures (in-memory only, no DB)\nexport interface ProjectFile {\n  path: string;\n  content: string;\n  language: string;\n}\n\nexport interface GenerationRequest {\n  prompt: string;\n  template?: 'react-vite' | 'nextjs' | 'vanilla';\n}\n\nexport interface GenerationResponse {\n  files: ProjectFile[];\n  dependencies: Record<string, string>;\n  projectName: string;\n  description: string;\n}\n\nexport interface GenerationProgress {\n  step: string;\n  currentFile?: string;\n  progress: number;\n  complete: boolean;\n}\n\n// Validation schemas\nexport const generationRequestSchema = z.object({\n  prompt: z.string().min(10, \"Prompt must be at least 10 characters\").max(2000, \"Prompt too long\"),\n  template: z.enum(['react-vite', 'nextjs', 'vanilla']).optional(),\n});\n\nexport type ValidatedGenerationRequest = z.infer<typeof generationRequestSchema>;\n\n// Template configurations\nexport interface Template {\n  id: 'react-vite' | 'nextjs' | 'vanilla';\n  name: string;\n  description: string;\n  icon: string;\n  techStack: string[];\n  files: ProjectFile[];\n  dependencies: Record<string, string>;\n}\n\n// Available templates with full details\nexport const TEMPLATES: Template[] = [\n  {\n    id: 'react-vite',\n    name: 'React + Vite',\n    description: 'Modern React application with Vite as the build tool. Lightning-fast HMR and optimized for development.',\n    icon: 'react',\n    techStack: ['React', 'TypeScript', 'Vite', 'ES Modules'],\n    files: [],\n    dependencies: {\n      'react': '^18.2.0',\n      'react-dom': '^18.2.0'\n    }\n  },\n  {\n    id: 'nextjs',\n    name: 'Next.js App Router',\n    description: 'Full-stack React framework with server-side rendering, App Router, and built-in optimizations.',\n    icon: 'nextjs',\n    techStack: ['Next.js', 'React', 'TypeScript', 'App Router'],\n    files: [],\n    dependencies: {\n      'next': '^14.0.0',\n      'react': '^18.2.0',\n      'react-dom': '^18.2.0'\n    }\n  },\n  {\n    id: 'vanilla',\n    name: 'Vanilla JavaScript',\n    description: 'Pure HTML, CSS, and JavaScript with no build tools or frameworks. Simple and lightweight.',\n    icon: 'vanilla',\n    techStack: ['HTML5', 'CSS3', 'JavaScript', 'No Build Tools'],\n    files: [],\n    dependencies: {}\n  }\n];\n\n// SSE Event Types for streaming\n// Note: The 'type' field is sent as the SSE event name, not in the data payload\nexport interface StatusEventData {\n  message: string;\n}\n\nexport interface FileEventData {\n  fileName: string;\n  progress: number;\n}\n\nexport interface CompleteEventData {\n  project: GenerationResponse;\n}\n\nexport interface ErrorEventData {\n  error: string;\n}\n\n// Full event structure (used internally in generators)\nexport interface StatusEvent {\n  type: 'status';\n  data: StatusEventData;\n}\n\nexport interface FileEvent {\n  type: 'file';\n  data: FileEventData;\n}\n\nexport interface CompleteEvent {\n  type: 'complete';\n  data: CompleteEventData;\n}\n\nexport interface ErrorEvent {\n  type: 'error';\n  data: ErrorEventData;\n}\n\nexport type StreamEvent = StatusEvent | FileEvent | CompleteEvent | ErrorEvent;\n","size_bytes":4513},"replit.md":{"content":"# AI Website Builder\n\nAn AI-powered full-stack website builder similar to Bolt.new that uses Google's Gemini API to generate complete web applications from natural language prompts.\n\n## Overview\n\nThis application allows users to describe a web application in plain English and watch as AI generates a complete, working project with live preview. The interface features a three-panel workspace inspired by professional code editors, with file explorer, code viewer, and live preview.\n\n## Features\n\n- **AI Code Generation**: Uses Gemini 2.5 Flash to generate complete web applications from text prompts\n- **Live Preview**: Instant preview of generated HTML/CSS/JavaScript applications in an iframe\n- **File Explorer**: Tree view of all generated project files with expandable folders\n- **Code Editor**: Syntax-highlighted code viewer for examining generated files\n- **Smart Templates**: Quick-start examples for common application types\n- **Session Persistence**: Projects are stored per-session for the duration of your visit\n- **Responsive Design**: Works beautifully across desktop, tablet, and mobile devices\n- **Dark Mode**: Full dark mode support with theme toggle\n\n## Technology Stack\n\n### Frontend\n- **React 18** - UI framework\n- **TypeScript** - Type safety\n- **Tailwind CSS** - Styling\n- **Shadcn UI** - Component library\n- **TanStack Query** - Data fetching and state management\n- **Wouter** - Lightweight routing\n\n### Backend\n- **Express.js** - Web server\n- **Google Gemini AI** - Code generation\n- **Express Session** - Session management\n- **Zod** - Runtime validation\n- **TypeScript** - Type safety\n\n## Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # React components\n│   │   │   ├── Workspace.tsx         # Main workspace layout\n│   │   │   ├── PromptInput.tsx       # Prompt input with examples\n│   │   │   ├── FileTree.tsx          # File explorer component\n│   │   │   ├── CodeEditor.tsx        # Code viewer\n│   │   │   ├── PreviewPanel.tsx      # Live preview iframe\n│   │   │   ├── GenerationProgress.tsx # Generation progress overlay\n│   │   │   ├── EmptyState.tsx        # Empty state illustration\n│   │   │   └── ThemeToggle.tsx       # Dark/light mode toggle\n│   │   ├── pages/         # Page components\n│   │   └── App.tsx        # App root\n│   └── index.html         # HTML entry point\n├── server/                # Backend Express server\n│   ├── gemini.ts         # Gemini AI integration\n│   ├── routes.ts         # API endpoints\n│   ├── storage.ts        # In-memory storage\n│   ├── preview.ts        # Preview HTML generator\n│   └── index.ts          # Server entry point\n└── shared/               # Shared types and schemas\n    └── schema.ts         # TypeScript types and Zod schemas\n```\n\n## API Endpoints\n\n- `POST /api/generate` - Generate a new project from a prompt\n- `GET /api/templates` - Get available project templates\n- `GET /api/project` - Get the current session's project\n- `DELETE /api/project` - Clear the current project\n- `GET /api/preview` - Get rendered HTML preview of the project\n\n## Environment Variables\n\n- `GEMINI_API_KEY` - Google Gemini API key (required)\n- `SESSION_SECRET` - Session encryption secret (auto-generated if not provided)\n- `PORT` - Server port (default: 5000)\n\n## How It Works\n\n1. **User Input**: User describes their desired application in the prompt input\n2. **AI Generation**: The prompt is sent to Gemini 2.5 Flash with structured output schema\n3. **Code Parsing**: The AI returns a JSON structure with files, dependencies, and metadata\n4. **Storage**: The generated project is stored in the user's session\n5. **Display**: Files are displayed in the explorer, and the first file is selected\n6. **Preview**: For static projects, HTML/CSS/JS are bundled and displayed in an iframe\n7. **Interaction**: Users can browse files, view code, and see the live result\n\n## Current Limitations\n\n- **Simple Projects Only**: Currently supports vanilla HTML/CSS/JavaScript projects\n- **No Build Process**: React, TypeScript, and framework projects are generated but cannot be previewed yet\n- **No Editing**: Generated code is read-only (viewing only, no editing)\n- **Session Only**: Projects are not persisted to database, only in-memory during session\n- **No Export**: Cannot download generated projects as ZIP files yet\n\n## Future Enhancements\n\n- WebContainer integration for running React, Next.js, and other framework projects\n- Real-time streaming of AI generation progress\n- Code editing capabilities with live preview updates\n- Project export as ZIP files\n- User accounts and project history\n- Collaborative editing features\n- Version control integration\n\n## Development\n\nThe project uses a full-stack TypeScript setup with hot module reloading:\n\n```bash\nnpm run dev\n```\n\nThis starts both the Express backend and Vite frontend development servers on port 5000.\n\n## Design Philosophy\n\nThe interface follows these design principles:\n\n- **Developer-Centric**: Familiar patterns from VS Code and professional IDEs\n- **Minimal Cognitive Load**: Clean, predictable interface with clear visual hierarchy\n- **Responsive by Default**: Works seamlessly across all device sizes\n- **Accessible**: Proper ARIA labels, keyboard navigation, and screen reader support\n- **Performance First**: Virtualized file trees, lazy loading, and optimized rendering\n\n## Testing Status\n\n✅ **All Core Features Tested and Working**\n\nThe application has been thoroughly tested with end-to-end tests covering:\n- Prompt input validation and user interaction\n- AI code generation via Gemini API\n- File tree navigation and file selection\n- Code editor display and syntax highlighting\n- Live preview rendering in iframe\n- Dark/light theme toggling\n- Progress modal during generation\n- Responsive viewport controls\n\nAll tests passed successfully with real Gemini API integration.\n\n## Recent Changes\n\n- Fixed Gemini API response schema to properly handle generated projects\n- Added session management for proper per-user project storage\n- Implemented preview HTML generator for static projects\n- Created comprehensive component library with consistent design\n- Added dark mode support with system preference detection\n- Implemented proper error handling and validation throughout\n- Successfully integrated and tested Gemini 2.5 Flash for code generation\n","size_bytes":6563},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { generateProject, streamGeneration, getTemplates, generateProjectStream } from \"./gemini\";\nimport { generationRequestSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { generatePreviewHTML, canUseSimplePreview } from \"./preview\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // SSE streaming endpoint for real-time generation\n  app.get(\"/api/generate/stream\", async (req, res) => {\n    const { prompt, template } = req.query;\n    \n    if (!prompt || typeof prompt !== 'string') {\n      return res.status(400).json({ error: 'Prompt is required' });\n    }\n    \n    // Set SSE headers\n    res.setHeader('Content-Type', 'text/event-stream');\n    res.setHeader('Cache-Control', 'no-cache');\n    res.setHeader('Connection', 'keep-alive');\n    res.setHeader('X-Accel-Buffering', 'no');\n    res.flushHeaders();\n    \n    let streamAborted = false;\n    \n    // Handle client disconnect\n    req.on('close', () => {\n      console.log('Client disconnected from SSE stream');\n      streamAborted = true;\n    });\n    \n    try {\n      const sessionId = req.sessionID || 'default';\n      \n      for await (const event of generateProjectStream(prompt, template as string | undefined)) {\n        // Stop if client disconnected\n        if (streamAborted) {\n          console.log('Aborting stream due to client disconnect');\n          break;\n        }\n        \n        const sseData = `event: ${event.type}\\ndata: ${JSON.stringify(event.data)}\\n\\n`;\n        res.write(sseData);\n        \n        // If complete, save the project and auto-save to history\n        if (event.type === 'complete' && event.data.project) {\n          await storage.saveProject(sessionId, event.data.project);\n          \n          // Auto-save to history with generated name (optional - requires database)\n          if (process.env.DATABASE_URL) {\n            try {\n              const autoSaveName = `${event.data.project.description?.substring(0, 50) || 'Generated Project'} - ${new Date().toLocaleString()}`;\n              await storage.saveToHistory(sessionId, autoSaveName, event.data.project, template as string | undefined);\n              console.log(`Auto-saved project: ${autoSaveName}`);\n            } catch (error) {\n              console.error('Auto-save to history failed:', error);\n            }\n          }\n        }\n      }\n      \n      if (!streamAborted) {\n        res.end();\n      }\n    } catch (error) {\n      console.error(\"SSE streaming error:\", error);\n      if (!streamAborted) {\n        const errorEvent = `event: error\\ndata: ${JSON.stringify({ \n          error: error instanceof Error ? error.message : 'Unknown error' \n        })}\\n\\n`;\n        res.write(errorEvent);\n        res.end();\n      }\n    }\n  });\n  \n  // Generate a new project using Gemini AI\n  app.post(\"/api/generate\", async (req, res) => {\n    try {\n      const validation = generationRequestSchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        const error = fromZodError(validation.error);\n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: error.message \n        });\n      }\n      \n      const { prompt, template } = validation.data;\n      \n      // Generate the project\n      const result = await generateProject(prompt, template);\n      \n      // Store in session-based storage\n      const sessionId = req.sessionID || 'default';\n      await storage.saveProject(sessionId, result);\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Generation error:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to generate project\" \n      });\n    }\n  });\n  \n  // Get available templates\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const templates = getTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Templates error:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch templates\" \n      });\n    }\n  });\n  \n  // Get current project\n  app.get(\"/api/project\", async (req, res) => {\n    try {\n      const sessionId = req.sessionID || 'default';\n      const project = await storage.getProject(sessionId);\n      \n      if (!project) {\n        return res.status(404).json({ error: \"No project found\" });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Project fetch error:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch project\" \n      });\n    }\n  });\n  \n  // Clear current project\n  app.delete(\"/api/project\", async (req, res) => {\n    try {\n      const sessionId = req.sessionID || 'default';\n      await storage.clearProject(sessionId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Project clear error:\", error);\n      res.status(500).json({ \n        error: \"Failed to clear project\" \n      });\n    }\n  });\n  \n  // Save current project to history\n  app.post(\"/api/projects/save\", async (req, res) => {\n    try {\n      const sessionId = req.sessionID || 'default';\n      const { name, templateId } = req.body;\n      \n      if (!name || typeof name !== 'string') {\n        return res.status(400).json({ error: 'Project name is required' });\n      }\n      \n      const currentProject = await storage.getProject(sessionId);\n      if (!currentProject) {\n        return res.status(404).json({ error: 'No current project to save' });\n      }\n      \n      const savedProject = await storage.saveToHistory(sessionId, name, currentProject, templateId);\n      res.json(savedProject);\n    } catch (error) {\n      console.error(\"Save to history error:\", error);\n      res.status(500).json({ \n        error: \"Failed to save project to history\" \n      });\n    }\n  });\n  \n  // Get project history for current session\n  app.get(\"/api/projects/history\", async (req, res) => {\n    try {\n      const sessionId = req.sessionID || 'default';\n      const history = await storage.getProjectHistory(sessionId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Get history error:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch project history\" \n      });\n    }\n  });\n  \n  // Get a specific project by ID\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id, 10);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: 'Invalid project ID' });\n      }\n      \n      const sessionId = req.sessionID || 'default';\n      const project = await storage.getProjectById(id, sessionId);\n      if (!project) {\n        return res.status(404).json({ error: 'Project not found' });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Get project by ID error:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch project\" \n      });\n    }\n  });\n  \n  // Delete a saved project\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id, 10);\n      if (isNaN(id)) {\n        return res.status(400).json({ error: 'Invalid project ID' });\n      }\n      \n      const sessionId = req.sessionID || 'default';\n      const deleted = await storage.deleteProject(id, sessionId);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: 'Project not found' });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Delete project error:\", error);\n      res.status(500).json({ \n        error: \"Failed to delete project\" \n      });\n    }\n  });\n  \n  // Get preview HTML for the current project\n  app.get(\"/api/preview\", async (req, res) => {\n    try {\n      const sessionId = req.sessionID || 'default';\n      const project = await storage.getProject(sessionId);\n      \n      if (!project) {\n        return res.status(404).send(`\n          <!DOCTYPE html>\n          <html>\n          <head><title>No Preview</title></head>\n          <body style=\"display: flex; align-items: center; justify-content: center; height: 100vh; margin: 0; font-family: sans-serif; background: #f5f5f5;\">\n            <div style=\"text-align: center;\">\n              <h2 style=\"color: #666;\">No project generated yet</h2>\n              <p style=\"color: #999;\">Generate a project to see the preview</p>\n            </div>\n          </body>\n          </html>\n        `);\n      }\n      \n      const html = generatePreviewHTML(project.files, project.dependencies);\n      res.setHeader('Content-Type', 'text/html');\n      res.send(html);\n    } catch (error) {\n      console.error(\"Preview error:\", error);\n      res.status(500).send(`\n        <!DOCTYPE html>\n        <html>\n        <head><title>Preview Error</title></head>\n        <body style=\"display: flex; align-items: center; justify-content: center; height: 100vh; margin: 0; font-family: sans-serif; background: #f5f5f5;\">\n          <div style=\"text-align: center;\">\n            <h2 style=\"color: #e74c3c;\">Preview Error</h2>\n            <p style=\"color: #999;\">${error instanceof Error ? error.message : 'Unknown error'}</p>\n          </div>\n        </body>\n        </html>\n      `);\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9346},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ProjectHistory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { History, Loader2, Trash2, FolderOpen, FileCode, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Project } from \"@shared/schema\";\n\ninterface ProjectHistoryProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onLoadProject: (project: Project) => void;\n}\n\nexport function ProjectHistory({ open, onOpenChange, onLoadProject }: ProjectHistoryProps) {\n  const { toast } = useToast();\n  \n  const { data: history = [], isLoading } = useQuery<Project[]>({\n    queryKey: ['/api/projects/history'],\n    enabled: open,\n  });\n  \n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/projects/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects/history'] });\n      toast({\n        title: \"Project deleted\",\n        description: \"The project has been removed from history.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error instanceof Error ? error.message : \"Failed to delete project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  const handleLoadProject = (project: Project) => {\n    onLoadProject(project);\n    onOpenChange(false);\n    toast({\n      title: \"Project loaded\",\n      description: `${project.name} has been loaded.`,\n    });\n  };\n  \n  const handleDeleteProject = (e: React.MouseEvent, id: number) => {\n    e.stopPropagation();\n    if (confirm(\"Are you sure you want to delete this project?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n  \n  return (\n    <Sheet open={open} onOpenChange={onOpenChange}>\n      <SheetContent side=\"right\" className=\"w-full sm:max-w-xl\">\n        <SheetHeader>\n          <SheetTitle className=\"flex items-center gap-2\">\n            <History className=\"w-5 h-5\" />\n            Project History\n          </SheetTitle>\n          <SheetDescription>\n            View and load your previously saved projects\n          </SheetDescription>\n        </SheetHeader>\n        \n        <ScrollArea className=\"h-[calc(100vh-8rem)] mt-6\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\" data-testid=\"loading-history\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n            </div>\n          ) : history.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 px-4 text-center\" data-testid=\"empty-history\">\n              <FolderOpen className=\"w-16 h-16 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No saved projects</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Projects you save will appear here for easy access\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4 pr-4\">\n              {history.map((project) => (\n                <Card\n                  key={project.id}\n                  className=\"hover-elevate active-elevate-2 cursor-pointer transition-all\"\n                  onClick={() => handleLoadProject(project)}\n                  data-testid={`card-project-${project.id}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"text-base truncate\" data-testid={`text-project-name-${project.id}`}>\n                          {project.name}\n                        </CardTitle>\n                        <CardDescription className=\"flex items-center gap-2 mt-1\">\n                          <Calendar className=\"w-3 h-3\" />\n                          <span className=\"text-xs\" data-testid={`text-project-date-${project.id}`}>\n                            {format(new Date(project.createdAt), 'MMM d, yyyy h:mm a')}\n                          </span>\n                        </CardDescription>\n                      </div>\n                      {project.templateId && (\n                        <Badge variant=\"secondary\" className=\"shrink-0\" data-testid={`badge-template-${project.id}`}>\n                          {project.templateId}\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"pb-3\">\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\" data-testid={`text-project-prompt-${project.id}`}>\n                      {project.prompt}\n                    </p>\n                    <div className=\"flex items-center gap-4 mt-3 text-xs text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <FileCode className=\"w-3 h-3\" />\n                        <span>{project.files.length} files</span>\n                      </div>\n                      {Object.keys(project.dependencies).length > 0 && (\n                        <div className=\"flex items-center gap-1\">\n                          <span>{Object.keys(project.dependencies).length} dependencies</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                  \n                  <CardFooter className=\"pt-0 flex justify-between gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => handleLoadProject(project)}\n                      data-testid={`button-load-${project.id}`}\n                    >\n                      <FolderOpen className=\"w-3 h-3 mr-1\" />\n                      Load\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={(e) => handleDeleteProject(e, project.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${project.id}`}\n                    >\n                      {deleteMutation.isPending ? (\n                        <Loader2 className=\"w-3 h-3 animate-spin\" />\n                      ) : (\n                        <Trash2 className=\"w-3 h-3\" />\n                      )}\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":7114},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nlet _db: ReturnType<typeof drizzle> | null = null;\n\nfunction getDb() {\n  if (!_db) {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL must be set. Ensure the database is provisioned in your Replit project.\");\n    }\n    const sql = neon(process.env.DATABASE_URL);\n    _db = drizzle(sql, { schema });\n  }\n  return _db;\n}\n\nexport const db = new Proxy({} as ReturnType<typeof drizzle>, {\n  get(target, prop) {\n    return (getDb() as any)[prop];\n  }\n});\n","size_bytes":614}},"version":2}